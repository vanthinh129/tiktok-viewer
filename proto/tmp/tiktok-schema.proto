syntax = "proto3";
package TikTok;



// @Common
message CommonMessageData {
    string method = 1;
    int64 msgId = 2;
    int64 roomId = 3;
    int64 createTime = 4;
    int32 monitor = 5;
    bool isShowMsg = 6;
    string describe = 7;
    Text displayText = 8;
    int64 foldType = 9;
    int64 anchorFoldType = 10;
    int64 priorityScore = 11;
    string logId = 12;
    string msgProcessFilterK = 13;
    string msgProcessFilterV = 14;
    string fromIdc = 15;
    string toIdc = 16;
    repeated string filterMsgTagsList = 17;
    LiveMessageSEI sei = 18;
    LiveMessageID dependRootId = 19;
    LiveMessageID dependId = 20;
    int64 anchorPriorityScore = 21;
    int64 roomMessageHeatLevel = 22;
    int64 foldTypeForWeb = 23;
    int64 anchorFoldTypeForWeb = 24;
    int64 clientSendTime = 25;
    IMDispatchStrategy dispatchStrategy = 26; // Enum

    message LiveMessageSEI {
        LiveMessageID uniqueId = 1;
        int64 timestamp = 2;
    }

    message LiveMessageID {
        string primaryId = 1;
        string messageScene = 2;
    }

    enum IMDispatchStrategy {
        IM_DISPATCH_STRATEGY_DEFAULT = 0;
        IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE = 1;
    }
}

// @Text
message Text {
    string displayType = 1;
    string defaultPattern = 2;
    TextFormat defaultFormat = 3;
    repeated TextPiece piecesList = 4;

    message TextPiece {
        int32 type = 1;
        TextFormat format = 2;
        string stringValue = 11;
        oneof textPieceType
        {
            TextPieceUser userValue = 21;
            TextPieceGift giftValue = 22;
        }
        TextPiecePatternRef patternRefValue = 24;
    }

    message TextFormat {
        string color = 1;
        bool bold = 2;
        bool italic = 3;
        int32 weight = 4;
        int32 italicAngle = 5;
        int32 fontSize = 6;
        bool useHeighLightColor = 7;
        bool useRemoteClor = 8;
    }

    message TextPieceGift {
        int32 giftId = 1;
        PatternRef nameRef = 2;
        ShowType showType = 3; // Enum
        int64 colorId = 4;
    }

    message TextPiecePatternRef {
        string key = 1;
        string defaultPattern = 2;
    }

    message TextPieceUser {
        User user = 1;
        bool withColon = 2;
    }

    message PatternRef {
        string key = 1;
        string default_pattern = 2;
    }

    enum ShowType {
        SHOW_TYPE_NORMAL = 0;
        SHOW_TYPE_FADE_IN_OUT = 1;
    }

}

// @Image
message Image {
    repeated string url = 1;
    string m_uri = 2;
    int32 height = 3;
    int32 width = 4;
    string avg_color = 5;
    int32 image_type = 6;
    string schema = 7;
    Content content = 8;
    bool is_animated = 9;

    message Content {
        string name = 1;
        string font_color = 2;
        int64 level = 3;
    }
}

// @Badge
message BadgeStruct {
    BadgeDisplayType badge_display_type = 1; // Enum
    BadgePriorityType badge_priority_type = 2;
    BadgeSceneType badge_scene = 3;
    Position position = 4;
    DisplayStatus display_status = 5;
    int64 greyed_by_client = 6;
    BadgeExhibitionType exhibition_type = 7;
    string schema_url = 10;
    bool display = 11;
    PrivilegeLogExtra log_extra = 12;
    oneof badgeType
    {
        ImageBadge image = 20;
        TextBadge text = 21;
        StringBadge str = 22;
        CombineBadge combine = 23;
    }
    bool is_customized = 24;

    message CombineBadge {
        int32 badge_display_type = 1;
        Image icon = 2;
        TextBadge text = 3;
        string str = 4;
        PaddingInfo padding = 5;
        FontStyle font_style = 6;
        ProfileCardPanel profile_card_panel = 7;
        CombineBadgeBackground background = 11;
        CombineBadgeBackground background_dark_mode = 12;
        bool icon_auto_mirrored = 13;
        bool bg_auto_mirrored = 14;
        int32 public_screen_show_style = 15;
        int32 personal_card_show_style = 16;
        int32 rank_list_online_audience_show_style = 17;
        int32 multi_guest_show_style = 18;
        ArrowConfig arrow_config = 19;
        PaddingInfo padding_new_font = 20;
    }

    message ArrowConfig {
        Image icon = 1;
    }

    message ProfileContent {
        bool useContent = 1;
        repeated IconConfig iconList = 2;
        NumberConfig numberConfig = 3;
    }

    message ProjectionConfig {
        bool useProjection = 1;
        Image icon = 2;
    }

    message NumberConfig {
        int64 number = 1;
        FontStyle fontStyle = 2;
        CombineBadgeBackground background = 3;
    }


    message ProfileCardPanel {
        bool useNewProfileCardStyle = 1;
        //  BadgeTextPosition badgeTextPosition = 2; // Enum
        ProjectionConfig projectionConfig = 3;
        ProfileContent profileContent = 4;
    }

    message CombineBadgeBackground {
        Image image = 1;
        string backgroundColorCode = 2;
        string borderColorCode = 3;
    }

    message ImageBadge {
        BadgeDisplayType badge_display_type = 1;
        Image image = 2;
    }

    message TextBadge {
        BadgeDisplayType badge_display_type = 1;
        string key = 2;
        string default_pattern = 3;
        repeated string pieces = 4;
    }

    message IconConfig {
        Image icon = 1;
        CombineBadgeBackground background = 2;
    }

    message StringBadge {
        BadgeDisplayType badge_display_type = 1;
        string str = 2;
    }

    //  enum DataCase {
    //    DATA_NOT_SET = 0;
    //    IMAGE = 20;
    //    TEXT = 21;
    //    STR = 22;
    //    COMBINE = 23;
    //  }

    enum BadgeDisplayType {
        BADGEDISPLAYTYPE_UNKNOWN = 0;
        BADGEDISPLAYTYPE_IMAGE = 1;
        BADGEDISPLAYTYPE_TEXT = 2;
        BADGEDISPLAYTYPE_STRING = 3;
        BADGEDISPLAYTYPE_COMBINE = 4;
    }

    enum BadgePriorityType {
        BADGE_PRIORITY_TYPE_UNKNOWN = 0;
        BADGE_PRIORITY_TYPE_STRONG_RELATION = 10;
        BADGE_PRIORITY_TYPE_PLATFORM = 20;
        BADGE_PRIORITY_TYPE_RELATION = 30;
        BADGE_PRIORITY_TYPE_ACTIVITY = 40;
        BADGE_PRIORITY_TYPE_RANK_LIST = 50;
    }

    enum BadgeSceneType {
        BADGE_SCENE_TYPE_UNKNOWN = 0;
        BADGE_SCENE_TYPE_ADMIN = 1;
        BADGE_SCENE_TYPE_FIRST_RECHARGE = 2;
        BADGE_SCENE_TYPE_FRIENDS = 3;
        BADGE_SCENE_TYPE_SUBSCRIBER = 4;
        BADGE_SCENE_TYPE_ACTIVITY = 5;
        BADGE_SCENE_TYPE_RANK_LIST = 6;
        BADGE_SCENE_TYPE_NEW_SUBSCRIBER = 7;
        BADGE_SCENE_TYPE_USER_GRADE = 8;
        BADGE_SCENE_TYPE_STATE_CONTROLLED_MEDIA = 9;
        BADGE_SCENE_TYPE_FANS = 10;
        BADGE_SCENE_TYPE_LIVE_PRO = 11;
        BADGE_SCENE_TYPE_ANCHOR = 12;
    }

    enum DisplayStatus {
        DISPLAY_STATUS_NORMAL = 0;
        DISPLAY_STATUS_SHADOW = 1;
    }

    enum BadgeExhibitionType {
        BADGE_EXHIBITION_TYPE_BADGE = 0;
        BADGE_EXHIBITION_TYPE_IDENTITY_LABEL = 1;
    }

    enum Position {
        POSITIONUNKNOWN = 0;
        POSITIONLEFT = 1;
        POSITIONRIGHT = 2;
    }

    message PaddingInfo {
        bool use_specific = 1;
        int32 middle_padding = 2;
        int32 badge_width = 3;
        int32 left_padding = 4;
        int32 right_padding = 5;
        int32 icon_top_padding = 6;
        int32 icon_bottom_padding = 7;
        HorizontalPaddingRule horizontal_padding_rule = 8;
        VerticalPaddingRule vertical_padding_rule = 9;
    }

    enum HorizontalPaddingRule {
        HORIZONTAL_PADDING_RULE_USE_MIDDLE_AND_WIDTH = 0;
        HORIZONTAL_PADDING_RULE_USE_LEFT_AND_MIDDLE_AND_RIGHT = 1;
    }

    enum VerticalPaddingRule {
        VERTICAL_PADDING_RULE_USE_DEFAULT = 0;
        VERTICAL_PADDING_RULE_USE_TOP_AND_BOTTOM = 1;
    }
}

// @Gift
message Gift {

    Image giftImage = 1;
    string describe = 2;
    int32 duration = 4;
    int64 id = 5;
    bool for_link_mic = 7;
    bool combo = 10;
    int32 giftType = 11;
    int32 diamondCount = 12;
    bool isDisplayedOnPanel = 13;
    int64 primaryEffectId = 14;
    Image giftLabelIcon = 15;
    string giftName = 16;
    Image icon = 21;
    string goldEffect = 24;
    Image previewImage = 47;
    GiftPanelBanner giftPanelBanner = 48;
    bool isBroadcastGift = 49;
    bool isEffectBefview = 50;
    bool isRandomGift = 51;
    bool isBoxGift = 52;
    bool canPutInGiftBox = 53;
    GiftBoxInfo giftBoxInfo = 54;

    message GiftPanelBanner {
        Text display_text = 1;
        Image left_icon = 2;
        string schema_url = 3;
        repeated string bg_colors = 5;
        string banner_lynx_url = 6;
        int32 banner_priority = 7;
        string banner_lynx_extra = 8;
        Image bg_image = 9;
    }

    message BatchGiftInfo {
        bool can_batch_send = 1;
        repeated int64 available_counts = 2;
    }
    message CrossScreenEffectInfo {
        map<int64, int32> single_action_effect_ids = 1;
        map<int64, int32> action_effect_ids = 2;
        map<int64, int32> reaction_effect_ids = 3;
    }
    message GiftSponsorInfo {
        int64 sponsor_id = 1;
        int64 sponsor_count = 2;
        int64 current_count = 3;
        int64 left_count_to_sponsor = 4;
        bool can_sponsor = 5;
    }
    message UGGiftStructInfo {
        bool is_ug_gift = 1;
        int64 ug_points_cost = 2;
    }
    message GiftSkin {
        int64 gift_skin_id = 1;
        string gift_skin_name = 2;
        Image static_image = 3;
        Image animated_image = 4;
    }
    message GiftText {
        int64 gift_text_id = 1;
        string gift_text_name = 2;
    }
    message GiftSkinToGiftTextsInfo {
        int64 gift_skin_id = 1;
        repeated int64 gift_text_ids = 2;
    }
    message GiftBoxInfo {
        int64 capacity = 1;
        bool is_primary_box = 2;
        string scheme_url = 3;
    }
}



// @User
message User {
    int64 userId = 1;
    string nickname = 3;
    string bioDescription = 5;
    Image profilePicture = 9;
    Image profilePictureMedium = 10;
    Image profilePictureLarge = 11;
    bool verified = 12;
    int32 status = 15;
    int64 createTime = 16;
    int64 modifyTime = 17;
    int32 secret = 18;
    string share_qrcode_uri = 19;
    repeated Image badgeImageList = 21;
    FollowInfo followInfo = 22;
    UserHonor user_honor = 23;
    FansClubMember fans_club = 24;
    BorderInfo border = 25;
    string special_id = 26;
    Image avatarBorder = 27;
    Image medal = 28;
    repeated Image user_badges = 29;
    repeated Image new_user_badges = 30;
    int32 top_vip_no = 31;
    UserAttr user_attr = 32;
    OwnRoom own_room = 33;
    int64 pay_score = 34;
    int64 fan_ticket_count = 35;
    AnchorLevel anchor_info = 36;
    LinkmicStatus link_mic_stats = 37;
    string uniqueId = 38;
    bool enable_show_commerce_sale = 39;
    bool with_fusion_shop_entry = 40;
    int64 pay_scores = 41;
    AnchorLevel anchor_level = 42;
    string verified_content = 43;
    Author author_info = 44;
    repeated User top_fans = 45;
    string secUid = 46;
    int32 user_role = 47;
    ActivityInfo reward_info = 49;
    Image personal_card = 52;
    AuthenticationInfo authentication_info = 53;
    repeated Image media_badge_image_list = 57;
    repeated int64 commerce_webcast_config_ids = 60;
    repeated BorderInfo borders = 61;
    ComboBadgeInfo combo_badge_info = 62;
    SubscribeInfo subscribe_info = 63;
    repeated BadgeStruct badges = 64;
    repeated int64 mint_type_label = 65;
    FansClubInfo fans_club_info = 66;
    bool allow_find_by_contacts = 1002;
    bool allow_others_download_video = 1003;
    bool allow_others_download_when_sharing_video = 1004;
    bool allow_share_show_profile = 1005;
    bool allow_show_in_gossip = 1006;
    bool allow_show_my_action = 1007;
    bool allow_strange_comment = 1008;
    bool allow_unfollower_comment = 1009;
    bool allow_use_linkmic = 1010;
    Image avatar_jpg = 1012;
    string background_img_url = 1013;
    int32 block_status = 1016;
    int32 comment_restrict = 1017;
    string constellation = 1018;
    int32 disable_ichat = 1019;
    int64 enable_ichat_img = 1020;
    int32 exp = 1021;
    bool fold_stranger_chat = 1023;
    int64 follow_status = 1024;
    int32 ichat_restrict_type = 1027;
    string id_str = 1028;
    bool is_follower = 1029;
    bool is_following = 1030;
    bool need_profile_guide = 1031;
    bool push_comment_status = 1033;
    bool push_digg = 1034;
    bool push_follow = 1035;
    bool push_friend_action = 1036;
    bool push_ichat = 1037;
    bool push_status = 1038;
    bool push_video_post = 1039;
    bool push_video_recommend = 1040;
    string verified_reason = 1043;
    bool enable_car_management_permission = 1044;
    repeated LiveEventInfo upcoming_event_list = 1045;
    string scm_label = 1046;
    EcommerceEntrance ecommerce_entrance = 1047;
    bool is_block = 1048;
    bool is_subscribe = 1090;
    bool is_anchor_marked = 1091;

    message LiveEventInfo {
        int64 eventId = 1;
        int64 startTime = 2;
        int64 duration = 3;
        string title = 4;
        string description = 5;
        bool hasSubscribed = 6;
        bool isPaidEvent = 7;
        int64 ticketAmount = 8;
        int64 payMethod = 9; // @warning Enum not found, should be PayMethod


        // @EventPayMethod
        // webcast.data.LiveEventInfo
        // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
        enum EventPayMethod {
            EVENTPAYMETHODINVALID = 0;
            EVENTPAYMETHODCOINS = 1;
            EVENTPAYMETHODCASH = 2;
        }


        // @WalletPackage
        // proto.webcast.data.LiveEventInfo
        // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
        message WalletPackage {
            string iapId = 1;
            string usdPriceShow = 2;
        }

    }


    // @ActivityInfo
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message ActivityInfo {
        Image badge = 1;
        Image storytag = 2;
    }



    // @AnchorLevel
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message AnchorLevel {
        int64 level = 1;
        int64 experience = 2;
        int64 lowestExperienceThisLevel = 3;
        int64 highestExperienceThisLevel = 4;
        int64 taskStartExperience = 5;
        int64 taskStartTime = 6;
        int64 taskDecreaseExperience = 7;
        int64 taskTargetExperience = 8;
        int64 taskEndTime = 9;
        Image profileDialogBg = 10;
        Image profileDialogBgBack = 11;
        Image stageLevel = 12;
        Image smallIcon = 13;
    }


    // @AuthenticationInfo
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message AuthenticationInfo {
        string customVerify = 1;
        string enterpriseVerifyReason = 2;
        Image authenticationBadge = 3;
    }


    // @AuthorStats
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message AuthorStats {
        int64 videoTotalCount = 1;
        int64 videoTotalPlayCount = 2;
        int64 videoTotalShareCount = 3;
        int64 videoTotalSeriesCount = 4;
        int64 varietyShowPlayCount = 5;
        int64 videoTotalFavoriteCount = 6;
    }


    // @Border
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message Border {
        Image icon = 1;
        int64 level = 2;
        string source = 3;
        Image profileDecorationRibbon = 4;
        string avatarBackgroundColor = 7;
        string avatarBackgroundBorderColor = 8;
    }


    // @ComboBadgeInfo
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message ComboBadgeInfo {
        Image icon = 1;
        int64 comboCount = 2;
    }


    // @EcommerceEntrance
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message EcommerceEntrance {
        EntranceType entranceType = 1; // Enum
        CreatorType creatorType = 2; // Enum
        string schema = 3;
        ShopEntranceInfo shopEntranceInfo = 4;
        ShowcaseEntranceInfo showcaseEntranceInfo = 5;


        // @CreatorType
        // webcast.data.User.EcommerceEntrance
        // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
        enum CreatorType {
            UNDEFINED = 0;
            OFFICIAL = 1;
            MARKET = 2;
            NORMAL = 3;
        }


        // @EntranceType
        // webcast.data.User.EcommerceEntrance
        // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
        enum EntranceType {
            PROFILE = 0;
            SHOWCASE = 1;
            SHOP = 2;
        }


        // @ShopEntranceInfo
        // proto.webcast.data.User.EcommerceEntrance
        // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
        message ShopEntranceInfo {
            string shopId = 1;
            string shopName = 2;
            string shopRating = 3;
            StoreLabel storeLabel = 4;
            string formatSoldCount = 5;
            int64 soldCount = 6;
            int32 expRatePercentile = 7;
            string expRateTopDisplay = 8;
            int32 rateDisplayStyle = 9;
            bool showRateNotApplicable = 10;


            // @StoreLabel
            // proto.webcast.data.User.EcommerceEntrance.ShopEntranceInfo
            // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
            message StoreLabel {
                StoreOfficialLabel officialLabel = 1;
                bool isBytemall = 2;


                // @StoreBrandLabelType
                // webcast.data.User.EcommerceEntrance.ShopEntranceInfo.StoreLabel
                // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
                enum StoreBrandLabelType {
                    NONE = 0;
                    OFFICIAL = 1;
                    AUTHORIZED = 2;
                    STORE_BRAND_LABEL_TYPE_BLUE_V = 3;
                    STORE_BRAND_LABEL_TYPE_TOP_CHOICE = 4;
                }


                // @StoreOfficialLabel
                // proto.webcast.data.User.EcommerceEntrance.ShopEntranceInfo.StoreLabel
                // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
                message StoreOfficialLabel {
                    ShopLabelImage labelImageLight = 1;
                    ShopLabelImage labelImageDark = 2;
                    int64 labelType = 3; // @warning Enum not found, should be LabelType
                    string labelTypeStr = 4;


                    // @ShopLabelImage
                    // proto.webcast.data.User.EcommerceEntrance.ShopEntranceInfo.StoreLabel.StoreOfficialLabel
                    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
                    message ShopLabelImage {
                        int32 height = 1;
                        int32 width = 2;
                        string minetype = 3;
                        string thumbUri = 4;
                        repeated string thumbUriList = 5;
                        string uri = 6;
                        repeated string urlList = 7;
                        string color = 8;
                    }

                }

            }

        }


        // @ShowcaseEntranceInfo
        // proto.webcast.data.User.EcommerceEntrance
        // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
        message ShowcaseEntranceInfo {
            string formatSoldCount = 1;
            int64 soldCount = 2;
        }

    }


    // @FansClub
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message FansClub {
        FansClubData data = 1;


        // @FansClubData
        // proto.webcast.data.User.FansClub
        // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
        message FansClubData {
            string clubName = 1;
            int32 level = 2;
            UserFansClubStatus userFansClubStatus = 3; // Enum
            repeated int64 availableGiftIdsList = 5;
            int64 anchorId = 6;


            // @BadgeIcon
            // webcast.data.User.FansClub.FansClubData
            // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
            enum BadgeIcon {
                UNKNOWN = 0;
                ICON = 1;
                SMALLICON = 2;
            }


            // @UserFansClubStatus
            // webcast.data.User.FansClub.FansClubData
            // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
            enum UserFansClubStatus {
                NOTJOINED = 0;
                ACTIVE = 1;
                INACTIVE = 2;
            }

        }


        // @PreferntialType
        // webcast.data.User.FansClub
        // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
        enum PreferntialType {
            PRESONALPROFILE = 0;
            OTHERROOM = 1;
        }

    }


    // @FansClubInfo
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message FansClubInfo {
        bool isSleeping = 1;
        int64 fansLevel = 2;
        int64 fansScore = 3;
        Image badge = 4;
        int64 fansCount = 5;
        string fansClubName = 6;
    }


    // @FollowInfo
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message FollowInfo {
        int64 followingCount = 1;
        int64 followerCount = 2;
        int64 followStatus = 3;
        int64 pushStatus = 4;
    }


    // @OwnRoom
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message OwnRoom {
        repeated int64 roomIdsList = 1;
        repeated string roomIdsStrList = 2;
    }


    // @PayGrade
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message PayGrade {
        Image diamondIcon = 2;
        string name = 3;
        Image icon = 4;
        string nextName = 5;
        int64 level = 6;
        Image nextIcon = 7;
        string gradeDescribe = 13;
        repeated GradeIcon gradeIconList = 14;
        int64 screenChatType = 15;
        Image imIcon = 16;
        Image imIconWithLevel = 17;
        Image liveIcon = 18;
        Image newImIconWithLevel = 19;
        Image newLiveIcon = 20;
        int64 upgradeNeedConsume = 21;
        string nextPrivileges = 22;
        Image background = 23;
        Image backgroundBack = 24;
        int64 score = 25;
        string gradeBanner = 1001;
        Image profileDialogBg = 1002;
        Image profileDialogBgBack = 1003;
    }


    // @SubscribeBadge
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message SubscribeBadge {
        Image originImg = 3;
        Image previewImg = 4;
    }


    // @SubscribeInfo
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message SubscribeInfo {
        bool qualification = 1;
        bool isSubscribe = 2;
        SubscribeBadge badge = 3;
        bool enableSubscription = 4;
        int64 subscriberCount = 5;
        bool isInGracePeriod = 6;
        bool isSubscribedToAnchor = 7;
        bool userGiftSubAuth = 9;
        bool anchorGiftSubAuth = 10;
    }


    // @UserAttr
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message UserAttr {
        bool isMuted = 1;
        bool isAdmin = 2;
        bool isSuperAdmin = 3;
        int64 muteDuration = 4;
    }


    // @UserStats
    // proto.webcast.data.User
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message UserStats {
        int64 id = 1;
        string idStr = 2;
        int64 followingCount = 3;
        int64 followerCount = 4;
        int64 recordCount = 5;
        int64 totalDuration = 6;
        int64 dailyFanTicketCount = 7;
        int64 dailyIncome = 8;
        int64 itemCount = 9;
        int64 favoriteItemCount = 10;
        int64 diamondConsumedCount = 12;
        int64 tuwenItemCount = 13;
    }

}

// @Emote
message Emote {
    string emoteId = 1;
    Image image = 2;
    AuditStatus auditStatus = 3; // Enum
    string uuid = 4;
    EmoteType emoteType = 5; // Enum
    ContentSource contentSource = 6; // Enum
    EmotePrivateType emotePrivateType = 7; // Enum
    string package_id = 8;
    AuditInfo audit_info = 9;
    RewardCondition reward_condition = 10;
    EmoteUploadInfo emote_upload_info = 11;
    int64 create_time = 12;
    EmoteScene emote_scene = 13;

    message AuditInfo {
        int64 violation_id = 1;
        AuditTaskType task_type = 2;

        enum AuditTaskType {
            AUDIT_TASK_TYPE_DEFAULT = 0;
            AUDIT_TASK_TYPE_APPEAL = 1;
        }
    }

    message EmoteUploadInfo {
        int64 user_id = 1;
        UserEmoteUploadSource emote_upload_source = 2;
        User user_info = 3;
        string user_id_str = 4;
    }
}

// @PunishEventInfo
message PunishEventInfo {
    string punishType = 1;
    string punishReason = 2;
    string punishId = 3;
    int64 violationUid = 4;
    PunishTypeId punishTypeId = 5; // Enum
    int64 duration = 6;
    string punish_perception_code = 7;
    string violation_uid_str = 9;
    string show_reason = 10;
}

// @MsgFilter
message MsgFilter {
    bool isGifter = 1;
    bool isSubscribedToAnchor = 2;
}

// @UserIdentity
// proto.webcast.data
message UserIdentity {
    bool isGiftGiverOfAnchor = 1;
    bool isSubscriberOfAnchor = 2;
    bool isMutualFollowingWithAnchor = 3;
    bool isFollowerOfAnchor = 4;
    bool isModeratorOfAnchor = 5;
    bool isAnchor = 6;
}

// @Goal
// proto.webcast.data
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
message LiveStreamGoal {
    int64 id = 1;
    int32 type = 2;
    int32 status = 3;
    repeated LiveStreamSubGoal sub_goals = 4;
    string description = 5;
    AuditStatus audit_status = 6;
    int32 cycle_type = 7;
    int64 start_time = 8;
    int64 expire_time = 9;
    int64 real_finish_time = 10;
    repeated LiveStreamGoalContributor contributors = 11;
    int32 contributors_length = 12;
    string id_str = 13;
    string audit_description = 14;
    GoalStats stats = 15;
    string goal_extra_info = 16;
    int32 mode = 17;
    AuditInfo audit_info = 18;
    string challenge_type = 20;
    bool is_uneditable = 21;

    message AuditInfo {
        int64 violation_id = 1;
        int32 task_type = 2;
    }

    message LiveStreamSubGoal {
        int32 type = 1;
        int64 id = 2;
        int64 progress = 3;
        int64 target = 4;
        LiveStreamSubGoalGift gift = 5;
        string id_str = 6;
        SubGoalPinInfo pin_info = 7;
        int32 source = 8;
        string recommended_text = 9;
        string recommended_header = 10;

        message SubGoalPinInfo {
            int64 pin_start_time = 1;
            int64 pin_end_time = 2;
            int64 pin_ready_time = 3;
        }
    }

    message LiveStreamSubGoalGift {
        string name = 1;
        Image icon = 2;
        int64 diamond_count = 3;
        int32 type = 4;
    }

    message LiveStreamGoalContributor {
        int64 user_id = 1;
        Image avatar = 2;
        string display_id = 3;
        int64 score = 4;
        string user_id_str = 5;
        bool in_room = 6;
        bool is_friend = 7;
        bool follow_by_owner = 9;
        bool is_fist_contribute = 10;
        repeated SubGoalContribution sub_goal_contributions = 11;

        message SubGoalContribution {
            string id = 1;
            int64 contribution_count = 2;
        }
    }

    message GoalStats {
        int64 total_coins = 1;
        int64 total_contributor = 2;
        GoalComparison comparison = 3;
        int64 total_new_fans = 4;

        message GoalComparison {
            int64 coins_incr = 1;
            int64 contributor_incr = 2;
        }
    }
}

// @Indicator
// proto.webcast.data
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
message LiveStreamGoalIndicator {
    string key = 1;
    int32 op = 2;
}


// --- HANDMADE

message Ranking {
    string type = 1;
    string label = 2;
    TikTokColor color = 3;
    repeated ValueLabel details = 4;
}

message TikTokColor {
    string color = 1;
    uint64 id = 4;
    uint32 data1 = 6;
}

message ValueLabel {
    uint32 data = 1;
    string label = 2;
    string label2 = 3;
    string label3 = 11;
}

/*message MessageDetails {
  uint32 data1 = 1;
  TikTokColor color = 2;
  string category = 11;
  UserContainer user = 21;
}*/

/*message UserContainer {
  User user = 1;
  uint32 data1 = 2;
}*/

// Container for uint-Data
/*message DataContainer {
  uint64 data1 = 1;
  uint32 data2 = 2;
  uint32 data3 = 3;
  uint32 data4 = 4;
  uint32 data5 = 5;
  uint32 data6 = 6;
  uint32 data7 = 7;
  uint32 data8 = 8;
  uint32 data9 = 9;
}*/

message TimeStampContainer {
    uint64 timestamp1 = 1;
    uint64 timestamp2 = 2;
    uint64 timestamp3 = 3;
}

/*message MemberMessageData {
  string type = 1;
  string label = 2;
  TikTokColor color = 3;
  repeated MessageDetails details = 4; // UserContainer-Data is empty
}*/

/*message LinkMicArmiesItems {
  uint64 hostUserId = 1;
  repeated LinkMicArmiesGroup battleGroups = 2;

  message LinkMicArmiesGroup {
    repeated User users = 1;
    uint32 points = 2;
  }
}*/

message PollStartContent {
    int64 StartTime = 1;
    int64 EndTime = 2;
    repeated PollOptionInfo OptionList = 3;
    string Title = 4;
    User Operator = 5;
}

message PollEndContent {
    PollEndType EndType = 1;
    repeated PollOptionInfo OptionList = 2;
    User Operator = 3;
}

message PollOptionInfo {
    int32 Votes = 1;
    string DisplayContent = 2;
    int32 OptionIdx = 3;
    repeated VoteUser VoteUserList = 4;
}

message VoteUser {
    int64 UserId = 1;
    string NickName = 2;
    Image AvatarThumb = 3;
}

message PollUpdateVotesContent {
    repeated PollOptionInfo OptionList = 2;
}
message UserFanTicket {
    int64 UserId = 1;
    int64 FanTicket = 2;
    int64 MatchTotalScore = 3;
    int32 MatchRank = 4;
}

message FanTicketRoomNoticeContent {
    repeated UserFanTicket UserFanTicketList = 1;
    int64 TotalLinkMicFanTicket = 2;
    int64 MatchId = 3;
    int64 EventTime = 4;
    string FanTicketIconUrl = 5;
    int64 play_id = 6;
    PlayScene play_scene = 7;
}

message LinkerAcceptNoticeContent {
    int64 fromUserId = 1;
    int64 fromRoomId = 2;
    int64 toUserId = 3;
}

message LinkerCancelContent {
    int64 fromUserId = 1;
    int64 toUserId = 2;
    int64 cancelType = 3;
    int64 actionId = 4;
}

message ListUser {
    User user = 1;
    int64 linkmicId = 2;
    string linkmicIdStr = 3;
    LinkmicRoleType linkStatus = 4;
    LinkType linkType = 5;
    int32 userPosition = 6;
    LinkSilenceStatus silenceStatus = 7;
    int64 modifyTime = 8;
    int64 linkerId = 9;
    LinkRoleType roleType = 10;
}


//it is just empty
message LinkerCloseContent {

}

message LinkerCreateContent {
    int64 ownerId = 1;
    int64 ownerRoomId = 2;
    int64 linkType = 3; // Assuming this is LinkType enum
}

message LinkerEnterContent {
    repeated ListUser linkedUsersList = 1;
    LinkmicMultiLiveEnum anchorMultiLiveEnum = 2;
    MultiLiveAnchorPanelSettings anchorSettingInfo = 3;;
}

message LinkerInviteContent {
    int64 fromUserId = 1;
    int64 fromRoomId = 2;
    string toRtcExtInfo = 3;
    bool rtcJoinChannel = 4;
    int64 vendor = 5;
    string secFromUserId = 6;
    string toLinkmicIdStr = 7;
    User fromUser = 8;
    int64 requiredMicIdx = 9;
    map<int64, string> rtc_ext_info_map = 10;
    LinkmicMultiLiveEnum multi_live_layout_enable = 11;
    MultiLiveAnchorPanelSettings multi_live_setting = 12;
    string from_linkmic_id_str = 13;
    InviteTopHostInfo from_top_host_info = 16;
    int64 action_id = 17;
    repeated LinkmicUserInfo linked_users = 18;
    PerceptionDialogInfo dialog_info = 19;
    PunishEventInfo punish_event_info = 20;
    int32 from_room_age_restricted = 21;
    repeated CohostABTestSetting ab_test_setting = 23;
    LinkerInviteMessageExtra linker_invite_msg_extra = 101;

    message InviteTopHostInfo {
        string rank_type = 1;
        int64 top_index = 2;
    }

    message LinkmicUserInfo {
        int64 user_id = 1;
        string linkmic_id_str = 2;
        int64 room_id = 3;
        int64 linked_time = 4;
    }

    message PerceptionDialogInfo {
        PerceptionDialogIconType icon_type = 1;
        Text title = 2;
        Text sub_title = 3;
        Text advice_action_text = 4;
        Text default_action_text = 5;
        string violation_detail_url = 6;
        Scene scene = 7;
        int64 target_user_id = 8;
        int64 target_room_id = 9;
        int64 count_down_time = 10;
        bool show_feedback = 11;
        repeated PerceptionFeedbackOption feedback_options = 12;
        int64 policy_tip = 13;
        int32 appeal_popup = 14;

        message PerceptionFeedbackOption {
            int64 id = 1;
            string content_key = 2;
        }
    }

    message CohostABTestSetting {
        int64 key = 1;
        CohostABTestList value = 2;

        message CohostABTestList {
            repeated CohostABTest ab_test_list = 1;

            message CohostABTest {
                CohostABTestType ab_test_type = 1;
                int64 group = 2;
            }
        }
    }

    message LinkerInviteMessageExtra {
        int32 match_type = 1;
        int32 invite_type = 2;
        int32 sub_type = 3;
        string theme = 4;
        int32 duration = 5;
        int32 layout = 6;
        string tips = 7;
        InviterRivalExtra inviter_rival_extra = 8;
        repeated InviterRivalExtra other_rival_extra = 9;
        CohostTopic topic_info = 10;
        string algo_request_id = 11;

        message InviterRivalExtra {
            TextType text_type = 1;
            string text = 2;
            string label = 3;
            int32 user_count = 4;
            Image avatar_thumb = 5;
            string display_id = 6;
            AuthenticationInfo authentication_info = 7;
            string nickname = 8;
            int64 follow_status = 9;
            Hashtag m_hashtag = 10;
            int64 user_id = 12;
            bool is_best_teammate = 13;
            OptPairInfo opt_pair_info = 14;
            int64 follower_count = 15;

            message AuthenticationInfo {
                string custom_verify = 1;
                string enterprise_verify_reason = 2;
                Image authentication_badge = 3;
            }

            message Hashtag {
                int64 id = 1;
                string title = 2;
                Image image = 3;
                HashtagNamespace namespace = 4;
            }

            message OptPairInfo {
                int64 mapping_id = 1;
                repeated OptPairUser display_user_list = 2;
                OptPairStatus button_notice_type = 3;
                int64 expected_time_sec = 4;
                int64 opt_pair_type = 5;

                message OptPairUser {
                    User user = 1;
                    int64 room_id = 2;
                }
            }
        }
    }
}

message CohostTopic {
    int64 id = 1;
    string title_key = 2;
    string title_text = 3;
    bool liked = 21;
    int64 total_heat = 22;
    int64 total_rivals = 23;
    repeated Image rivals_avatar = 24;
}

message LinkerKickOutContent {
    int64 fromUserId = 1;
    KickoutReason kickoutReason = 2;
}

message LinkerLeaveContent {
    int64 userId = 1;
    string linkmicIdStr = 2;
    int64 sendLeaveUid = 3;
    int64 leaveReason = 4;
}

//Empty
message LinkerLinkedListChangeContent {

}
//Empty
message CohostListChangeContent {
}


message LinkerListChangeContent {
    repeated ListUser linkedUsers = 1;
    repeated ListUser appliedUsers = 2;
    repeated ListUser connectingUsers = 3;
}

message LinkerMediaChangeContent {
    GuestMicCameraManageOp op = 1;
    int64 toUserId = 2;
    int64 anchorId = 3;
    int64 roomId = 4;
    GuestMicCameraChangeScene changeScene = 5;
    LinkerMediaChangeOperator operator_info = 7;

    message LinkerMediaChangeOperator {
        int64 user_id = 1;
        LinkMicUserAdminType operator_type = 2;
        string nick_name = 3;
        string display_id = 4;
    }
}

//Empty
message LinkerMicIdxUpdateContent {

}

message LinkerMuteContent {
    int64 userId = 1;
    MuteStatus status = 2;
}

message LinkerRandomMatchContent {
    User user = 1;
    int64 roomId = 2;
    int64 inviteType = 3;
    string matchId = 4;
    int64 innerChannelId = 5;
}

message LinkerReplyContent {
    int64 fromUserId = 1;
    int64 fromRoomId = 2;
    LinkmicInfo fromUserLinkmicInfo = 3;
    int64 toUserId = 4;
    LinkmicInfo toUserLinkmicInfo = 5;
    int64 linkType = 6;
    int64 replyStatus = 7;
    LinkerSetting linkerSetting = 8;
    User fromUser = 9;
    User toUser = 10;

    message LinkmicInfo {
        string accessKey = 1;
        int64 linkMicId = 2;
        bool joinable = 3;
        int32 confluenceType = 4;
        string rtcExtInfo = 5;
        string rtcAppId = 6;
        string rtcAppSign = 7;
        string linkmicIdStr = 8;
        int64 vendor = 9;
    }
}

message LinkerSetting {
    int64 MaxMemberLimit = 1;
    int64 LinkType = 2;
    Scene Scene = 3;
    int64 OwnerUserId = 4;
    int64 OwnerRoomId = 5;
    int64 Vendor = 6;
}

message LinkerSysKickOutContent {
    int64 userId = 1;
    string linkmicIdStr = 2;
}

message LinkmicUserToastContent {
    int64 userId = 1;
    int64 roomId = 2;
    Text displayText = 3;
    int64 leaved_user_id = 4;
}

message LinkerUpdateUserContent {
    int64 fromUserId = 1;
    int64 toUserId = 2;
    map<string, string> update_info = 3;
}

message LinkerUpdateUserSettingContent {
    MultiLiveAnchorPanelSettings multi_live_anchor_panel_settings = 1;
}

//Empty
message LinkerWaitingListChangeContent {

}


message MultiLiveAnchorPanelSettings {
    int64 userId = 1;
    int64 layout = 2;
    int64 fixMicNum = 3;
    int64 allowRequestFromUser = 4;
    int64 allowRequestFromFollowerOnly = 5;
    LinkmicApplierSortSetting applierSortSetting = 7;
    int64 applier_sort_gift_score_threshold = 8;
    int32 allow_request_from_friends = 9;
    int32 allow_request_from_followers = 10;
    int32 allow_request_from_others = 11;
    int32 enable_show_multi_guest_layout = 12;
}


message Player {
    int64 roomId = 1;
    int64 userId = 2;
}

message AllListUser {
    repeated LinkLayerListUser linkedList = 2;
    repeated LinkLayerListUser appliedList = 3;
    repeated LinkLayerListUser invitedList = 4;
    repeated LinkLayerListUser readyList = 5;
}

message LinkLayerListUser {
    User user = 1;
    int64 linkmicId = 2;
    Position pos = 3;
    int64 linkedTimeNano = 4;
    string appVersion = 5;
    int64 magicNumber1 = 7;
}

message Position {
    int32 type = 1;
    LinkPosition link = 2;
}

message LinkPosition {
    int32 position = 1;
    int32 opt = 2;
}

message GroupPlayer {
    int64 channelId = 1;
    User user = 2;
}

message DSLConfig {
    int32 sceneVersion = 1;
    string layoutId = 2;
}

message GroupChannelAllUser {
    int64 groupChannelId = 1;
    repeated GroupChannelUser userList = 2;
    int64 content_version = 3;
}

message GroupChannelUser {
    int64 channelId = 1;
    GroupStatus status = 2;
    TextType type = 3;
    AllListUser allUser = 4;
    int64 joinTime = 5;
    int64 linkedTime = 6;
    GroupPlayer ownerUser = 7;
    string group_linkmic_id = 8;
}

message RTCExtraInfo {
    RTCEngineConfig liveRtcEngineConfig = 1;
    repeated RTCLiveVideoParam liveRtcVideoParamList = 2;
    RTCBitrateMap rtcBitrateMap = 3;
    int32 rtcFps = 4;
    RTCMixBase rtc_mix_base = 5;
    ByteRTCExtInfo byte_rtc_ext_info = 6;
    RTCInfoExtra rtc_info_extra = 7;
    string rtcBusinessId = 8;
    RTCOther rtc_other = 9;
    int32 interactClientType = 10;

    message RTCMixBase {
        int32 bitrate = 1;
    }

    message ByteRTCExtInfo {
        int32 default_signaling = 1;
    }

    message RTCInfoExtra {
        string version = 1;
    }

    message RTCOther {
        int32 trans_coding_second = 1;
    }

    message RTCEngineConfig {
        string rtcAppId = 1;
        string rtcUserId = 2;
        string rtcToken = 3;
        int64 rtcChannelId = 4;
    }

    message RTCLiveVideoParam {
        int32 strategyId = 1;
        RTCVideoParam params = 2;
    }

    message RTCVideoParam {
        int32 width = 1;
        int32 height = 2;
        int32 fps = 3;
        int32 bitrateKbps = 4;
    }

    message RTCBitrateMap {
        int32 xx1 = 1;
        int32 xx2 = 2;
        int32 xx3 = 3;
        int32 xx4 = 4;
    }
}

message CreateChannelContent {
    Player  owner = 1;
    string ownerLinkMicId = 2;
}

message ListChangeContent {
    int32 list_change_type = 1;
    AllListUser user_list = 2;
    repeated string linked_user_ui_positions = 3;
    repeated ContentPosition content_pos = 4;
}

message ContentPosition {
    string content_i_d = 1;
    ContentPositionType content_type = 2;
    MicPositionData pos = 3;
    string content_linkmic_i_d = 4;
    int64 start_time_nano = 5;
}

message MicPositionData {
    int32 type = 1;
    LinkPosition link_position = 2;
}

message MultiLiveContent {
    ApplyBizContent applyBizContent = 1;
    InviteBizContent inviteBizContent = 2;
    ReplyBizContent replyBizContent = 3;
    PermitBizContent permitBizContent = 4;
    JoinDirectBizContent joinDirectBizContent = 5;
    KickOutBizContent kickOutBizContent = 6;

    message ApplyBizContent {
        User user = 1;
    }

    message JoinDirectBizContent {
        int64 reply_im_msg_id = 1;
        MultiGuestOutsideRoomInviteSource outside_room_invite_source = 2;
    }

    message InviteBizContent {
        MultiLiveAnchorPanelSettings anchorSettingInfo = 1;
        ContentInviteSource inviteSource = 2;
        User operatorUserInfo = 3;
        LinkMicUserAdminType operatorLinkAdminType = 4;
        User inviteeUserInfo = 5;
        LinkmicShareRevenueSetting share_revenue_setting = 6;
    }

    message ReplyBizContent {
        int32 linkType = 1;
        int32 isTurnOffInvitation = 2;
        User replyUserInfo = 3;
    }

    message PermitBizContent {
        MultiLiveAnchorPanelSettings anchorSettingInfo = 1;
        int64 expireTimestamp = 2;
        User operatorUserInfo = 3;
        LinkMicUserAdminType operatorLinkAdminType = 4;
        LinkUserType link_user_type = 5;
    }

    message KickOutBizContent {
        User operatorUserInfo = 1;
        LinkMicUserAdminType operatorLinkAdminType = 2;
        User kickPlayerUserInfo = 3;
    }

}

message InviteContent {
    Player  invitor = 1;
    RTCExtraInfo inviteeRtcExtInfo = 2;
    string invitorLinkMicId = 3;
    string inviteeLinkMicId = 4;
    bool isOwner = 5;
    Position pos = 6;
    DSLConfig dsl = 7;
    User invitee = 8;
    User operator = 9;
}


// @ApplyContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
message ApplyContent {
    Player  applier = 1;
    string applierLinkMicId = 2;
}


// @PermitApplyContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
message PermitApplyContent {
    Player  permiter = 1;
    string permiterLinkMicId = 2;
    Position applierPos = 3;
    ReplyStatus replyStatus = 4; // Enum
    DSLConfig dsl = 5;
    User applier = 6;
    User operator = 7;
    string applierLinkMicId = 8;
}


// @ReplyInviteContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
message ReplyInviteContent {
    Player  invitee = 1;
    ReplyStatus replyStatus = 2;
    string inviteeLinkMicId = 3;
    Position inviteePos = 4;
    Player  inviteOperatorUser = 5;
    repeated string linked_user_ui_positions = 6;
    repeated PosIdentity ui_pos = 7;
}


// @KickOutContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
message KickOutContent {
    Player  offliner = 1;
    KickoutReason kickoutReason = 2;
    repeated string linked_user_ui_positions = 3;
    repeated PosIdentity ui_pos = 4;
}

message PosIdentity {
    PosIdentityType type = 1;
    string value = 2;
}


// @CancelApplyContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
message CancelApplyContent {
    Player  applier = 1;
    string applierLinkMicId = 2;
}


// @CancelInviteContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
message CancelInviteContent {
    Player  invitor = 1;
    string invitorLinkMicId = 2;
    string inviteeLinkMicId = 3;
    int64 inviteSeqId = 4;
    Player  invitee = 5;
}


// @LeaveContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
message LeaveContent {
    Player  leaver = 1;
    int64 leaveReason = 2;
    repeated string linked_user_ui_positions = 3;
    repeated PosIdentity ui_pos = 4;
}


// @FinishChannelContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
message FinishChannelContent {
    Player  owner = 1;
    int64 finishReason = 2;
}


// @JoinDirectContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
message JoinDirectContent {
    LinkLayerListUser joiner = 1;
    AllListUser allUsers = 2;
}


// @LeaveJoinGroupContent
// proto.webcast.im
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
message LeaveJoinGroupContent {
    GroupPlayer operator = 1;
    int64 groupChannelId = 2;
    string leaveSource = 3;
    repeated string linked_user_ui_positions = 4;
}


// @PermitJoinGroupContent
// proto.webcast.im
message PermitJoinGroupContent {
    GroupPlayer approver = 1;
    AgreeStatus agreeStatus = 2;
    JoinType type = 3;
    repeated RTCExtraInfo groupExtInfoList = 4;
    GroupChannelAllUser groupUser = 5;
    MigrationDetails migration_details = 6;
    repeated string linked_user_ui_positions = 7;
}

message MigrationDetails {
    bool is_migrate = 1;
    int64 source_group_channel_id = 2;
    int64 target_group_channel_id = 3;
}


// @CancelJoinGroupContent
// proto.webcast.im
message CancelJoinGroupContent {
    repeated GroupPlayer leaverList = 1;
    GroupPlayer operator = 2;
    JoinType type = 3;
    GroupChannelAllUser group_user = 4;
}



message P2PGroupChangeContent {
    repeated RTCExtraInfo groupExtInfoList = 1;
    GroupChannelAllUser groupUser = 2;
    MigrationDetails migration_details = 3;
    repeated ContentPosition content_pos = 4;
}

message GroupChangeContent {
    GroupChannelAllUser group_user = 1;
    repeated string linked_user_ui_positions = 2;
}


message BusinessContent {
    int64 overLength = 1;
    MultiLiveContent multiLiveContent = 100;
    CohostContent cohostContent = 200;

    message CohostContent {
        JoinGroupBizContent joinGroupBizContent = 1;
        PermitJoinGroupBizContent permit_join_group_biz_content = 2;
        ListChangeBizContent list_change_biz_content = 11;
    }

    message PermitJoinGroupBizContent {
        ReplyStatus reply_status = 1;
        SourceType source_type = 2;
    }

    message ListChangeBizContent {
        map<int64, CohostUserInfo> user_infos = 1;
        repeated VirtualWaitingUser waiting_users = 2;

        message VirtualWaitingUser {
            int64 user_id = 1;
            int64 timestamp = 2;
            repeated Image avatars = 3;
        }
    }

    message CohostUserInfo {
        int64 permission_type = 1;
        SourceType source_type = 2;
        bool is_low_version = 3;
        int64 best_teammate_uid = 4;
        bool has_topic_perm = 5;
        CohostStreamConfig stream_config = 6;
        bool in_different_invite_type_control_group = 7;
        string nickname = 11;
        string display_id = 12;
        Image avatar_thumb = 13;
        int64 follow_status = 14;
        string user_id_str = 15;

        message CohostStreamConfig {
            string screen_share_stream_id = 1;
        }
    }

    message JoinGroupBizContent {
        int32 fromRoomAgeRestricted = 1;
        Tag fromTag = 2;
        PerceptionDialogInfo dialog = 3;
        PunishEventInfo punishInfo = 4;
        CohostTopic topic_info = 5;
        string algo_request_id = 6;
        CohostLayoutMode cohost_layout_mode = 7;
        TagV2 tag = 8;
        RivalsGameTag game_tag = 9;
        string new_user_education = 11;
        JoinGroupMessageExtra joinGroupMsgExtra = 101;

        message RivalsGameTag {
            int64 tag_id = 1;
            string tag_display_text = 2;
        }

        message TagV2 {
            TagClassification tag_classification = 1;
            int32 tag_type = 2;
            string tag_value = 3;
            string starling_key = 4;
            SecondDegreeRelationContent second_degree_relation_content = 10;
            int64 cohost_history_day = 11;
            SimilarInterestContent similar_interest_content = 12;

            message UserInfo {
                int64 user_id = 1;
                string nick_name = 2;
                Image avatar_thumb = 3;
            }
            message SecondDegreeRelationContent {
                repeated UserInfo related_users = 1;
                int64 total_related_user_cnt = 2;
            }
            message SimilarInterestContent {
                int64 content_id = 1;
                string display_text = 2;
            }
        }
    }

    message Tag {
        int32 tagType = 1;
        string tagValue = 2;
        string tagText = 3;
    }

    message PerceptionDialogInfo {
        int64 iconType = 1; // @warning Enum not found, should be IconType
        Text title = 2;
        Text subTitle = 3;
        Text adviceActionText = 4;
        Text defaultActionText = 5;
        string violationDetailUrl = 6;
        int32 scene = 7;
        int64 targetUserId = 8;
        int64 targetRoomId = 9;
        int64 countDownTime = 10;
        bool showFeedback = 11;
        repeated PerceptionFeedbackOption feedbackOptionsList = 12;
        int64 policyTip = 13;
    }

    message PerceptionFeedbackOption {
        int64 id = 1;
        string contentKey = 2;
    }

    message JoinGroupMessageExtra {
        int64 sourceType = 1;
        RivalExtra extra = 2;
        repeated RivalExtra otherUsersList = 3;


        // @RivalExtra
        // proto.webcast.im.JoinGroupMessageExtra
        // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
        message RivalExtra {
            int64 userCount = 4;
            Image avatarThumb = 5;
            string displayId = 6;
            AuthenticationInfo authenticationInfo = 7;
            string nickname = 8;
            int64 followStatus = 9;
            Hashtag hashtag = 10;
            TopHostInfo topHostInfo = 11;
            int64 userId = 12;
            bool isBestTeammate = 13;

            message AuthenticationInfo {
                string customVerify = 1;
                string enterpriseVerifyReason = 2;
                Image authenticationBadge = 3;
            }
        }
    }
    message Hashtag {
        int64 id = 1;
        string title = 2;
        Image image = 3;
        HashtagNamespace namespace = 4;
    }

    message TopHostInfo {
        string rankType = 1;
        int64 topIndex = 2;
    }
}

message JoinGroupContent {
    GroupChannelAllUser groupUser = 1;
    GroupPlayer joinUser = 2;
    JoinType type = 3;
    repeated RTCExtraInfo group_ext_info = 4;
}

message PrivilegeLogExtra {
    string data_version = 1;
    string privilege_id = 2;
    string privilege_version = 3;
    string privilege_order_id = 4;
    string level = 5;
}

message FontStyle {
    int32 font_size = 1;
    int32 font_width = 2;
    string font_color = 3;
    string border_color = 4;
}

message UserHonor {
    int64 total_diamond = 1;
    Image diamond_icon = 2;
    string current_honor_name = 3;
    Image current_honor_icon = 4;
    string next_honor_name = 5;
    int32 level = 6;
    Image next_honor_icon = 7;
    int64 current_diamond = 9;
    int64 this_grade_min_diamond = 10;
    int64 this_grade_max_diamond = 11;
    string grade_describe = 13;
    repeated GradeIcon grade_icon_list = 14;
    int64 screen_chat_type = 15;
    Image im_icon = 16;
    Image im_icon_with_level = 17;
    Image live_icon = 18;
    Image new_im_icon_with_level = 19;
    Image new_live_icon = 20;
    int64 upgrade_need_consume = 21;
    string next_privileges = 22;
    Image profile_dialog_bg = 23;
    Image profile_dialog_back_bg = 24;
    int64 score = 25;
    string grade_banner = 1001;
}

// @GradeIcon
// proto.webcast.data.User.PayGrade
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
message GradeIcon {
    Image icon = 1;
    int64 iconDiamond = 2;
    int64 level = 3;
    string levelStr = 4;
}

message BorderInfo {
    Image icon = 1;
    int64 level = 2;
    string source = 3;
    Image profile_decoration_ribbon = 4;
    PrivilegeLogExtra border_log_extra = 5;
    PrivilegeLogExtra ribbon_log_extra = 6;
    string avatar_background_color = 7;
    string avatar_background_border_color = 8;
}

message FansClubMember {
    FansClubData data = 1;
    map<int32, FansClubData> prefer_data = 2;
}

message FansClubData {
    string club_name = 1;
    int32 level = 2;
    int32 user_fans_club_status = 3;
    UserBadge badge = 4;
    repeated int64 available_gift_ids = 5;
    int64 anchor_id = 6;

    message UserBadge {
        map<int32, Image> icons = 1;
        string title = 2;
    }
}

message Author {
    int64 video_total_count = 1;
    int64 video_total_play_count = 2;
    int64 video_total_favorite_count = 6;
}

message PublicAreaCommon {
    Image userLabel = 1;
    int64 userConsumeInRoom = 2;
}

message PublicAreaMessageCommon {
    int64 scroll_gap_count = 1;
    int64 anchor_scroll_gap_count = 2;
    bool release_to_scroll_area = 3;
    bool anchor_release_to_scroll_area = 4;
    bool is_anchor_marked = 5;
    CreatorSuccessInfo creator_success_info = 6;
    PortraitInfo portrait_info = 7;
    UserInteractionInfo user_interaction_info = 8;
    int64 admin_fold_type = 9;

    message TagItem {
        TagType tag_type = 1;
        Text tag_text = 2;
    }
    message Topic {
        TopicActionType topic_action_type = 1;
        Text topic_text = 2;
        Text topic_tips = 3;
    }
    message CreatorSuccessInfo {
        repeated TagItem tags = 1;
        Topic topic = 2;
    }
    message UserMetrics {
        UserMetricsType type = 1;
        string metrics_value = 2;
    }
    message PortraitTag {
        string tag_id = 1;
        int64 priority = 2;
        string show_value = 3;
        string show_args = 4;
    }
    message PortraitInfo {
        repeated UserMetrics user_metrics = 1;
        repeated PortraitTag portrait_tag = 2;
    }
    message UserInteractionInfo {
        int64 like_cnt = 1;
        int64 comment_cnt = 2;
        int64 share_cnt = 3;
    }
}

message GiftModeMeta {
    int64 gift_id = 1;
    string gift_name_key = 2;
    Image gift_icon_image = 3;
    Text gift_mode_desc = 4;
}

message BattleTeamUser {
    int64 user_id = 1;
    int64 score = 2;
    string user_id_str = 3;
}

message BattleSetting {
    int64 battle_id = 1;
    int64 start_time_ms = 2;
    int32 duration = 3;
    int64 channel_id = 4;
    int32 status = 5;
    BattleInviteType invite_type = 6;
    GiftModeMeta gift_mode_meta = 7;
    BattleType battle_type = 8;
    int64 extra_duration_second = 9;
    int64 end_time_ms = 10;
}

message BattleTeamUserArmies {
    int64 team_id = 1;
    repeated BattleTeamUser team_users = 2;
    int64 team_total_score = 3;
    BattleUserArmies user_armies = 4;
    int64 host_rank = 5;
}

message BattleUserArmies {
    repeated BattleUserArmy user_army = 1;
    int64 host_score = 2;
    string anchor_id_str = 3;
}

message BattleUserArmy {
    int64 user_id = 1;
    int64 score = 2;
    string nickname = 3;
    Image avatar_thumb = 4;
    int64 diamond_score = 5;
    string user_id_str = 6;
}

message HighScoreControlCfg {
    bool normal_control_applied = 1;
    int64 threshold = 2;
    repeated int64 origin_display_to_user_list = 3;
}

enum AuditStatus {
    AUDITSTATUSUNKNOWN = 0;
    AUDITSTATUSPASS = 1;
    AUDITSTATUSFAILED = 2;
    AUDITSTATUSREVIEWING = 3;
    AUDITSTATUSFORBIDDEN = 4;
}
enum EmoteType {
    EMOTETYPENORMAL = 0;
    EMOTETYPEWITHSTICKER = 1;
}
enum ContentSource {
    CONTENTSOURCEUNKNOWN = 0;
    CONTENTSOURCENORMAL = 1;
    CONTENTSOURCECAMERA = 2;
}
enum EmotePrivateType {
    EMOTE_PRIVATE_TYPE_NORMAL = 0;
    EMOTE_PRIVATE_TYPE_SUB_WAVE = 1;
}

enum TextType {
    DISPLAY_TEXT = 0;
    CONTENT = 1;
}

enum LinkmicApplierSortSetting {
    LINKMIC_APPLIER_SORT_SETTING_NONE = 0;
    LINKMIC_APPLIER_SORT_SETTING_BY_GIFT_SCORE = 1;
}

enum HashtagNamespace {
    GLOBAL = 0;
    GAMING = 1;
}

enum AgreeStatus {
    AGREE_UNKNOWN = 0;
    AGREE = 1;
    REJECT = 2;
}

enum KickoutReason {
    KICKOUT_REASON_UNKNOWN = 0;
    KICKOUT_REASON_FIRST_FRAME_TIMEOUT = 1;
    KICKOUT_REASON_BY_HOST = 2;
    KICKOUT_REASON_RTC_LOST_CONNECTION = 3;
    KICKOUT_REASON_BY_PUNISH = 4;
    KICKOUT_REASON_BY_ADMIN = 5;
    KICKOUT_REASON_HOST_REMOVE_ALL_GUESTS = 6;
}

enum GroupStatus {
    GROUP_STATUS_UNKNOWN = 0;
    GROUP_STATUS_WAITING = 1;
    GROUP_STATUS_LINKED = 3;
}

enum BusinessCase {
    BUSINESS_NOT_SET = 0;
    APPLY_BIZ_CONTENT = 1;
    INVITE_BIZ_CONTENT = 2;
    REPLY_BIZ_CONTENT = 3;
    PERMIT_BIZ_CONTENT = 4;
    JOIN_DIRECT_BIZ_CONTENT = 5;
    KICK_OUT_BIZ_CONTENT = 6;
    LIST_CHANGE_BIZ_CONTENT = 11;
    MULTI_LIVE_CONTENT = 100;
    COHOST_CONTENT = 200;
}

enum ReplyStatus {
    REPLY_STATUS_UNKNOWN = 0;
    REPLY_STATUS_AGREE = 1;
    REPLY_STATUS_REFUSE_PERSONALLY = 2;
    REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT = 3;
    REPLY_STATUS_REFUSE_PROCESSING_INVITATION = 4;
    REPLY_STATUS_REFUSE_BY_TIMEOUT = 5;
    REPLY_STATUS_REFUSE_EXCEPTION = 6;
    REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED = 7;
    REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE = 8;
    REPLY_STATUS_REFUSE_IN_MICROOM = 9;
    REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN = 10;
    REPLY_STATUS_REFUSE_IN_MULTI_GUEST = 11;
    REPLY_STATUS_REFUSE_PAUSE_LIVE = 12;
    REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING = 13;
    REPLY_STATUS_REFUSE_DRAW_GUESSING = 14;
    REPLY_STATUS_REFUSE_RANDOM_MATCHING = 15;
    REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING = 16;
    REPLY_STATUS_REFUSE_IN_MICROOM_FOR_MULTI_COHOST = 17;
    REPLY_STATUS_REFUSE_COHOST_FINISHED = 18;
    REPLY_STATUS_REFUSE_NOT_CONNECTED = 19;
    REPLY_STATUS_REFUSE_LINKMIC_FULL = 20;
    REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE = 21;
    REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE = 22;
    REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY = 23;
    REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST = 24;
    REPLY_STATUS_REFUSE_TOPIC_PAIRING = 25;
}

enum SubscribeType {
    SUBSCRIBETYPE_ONCE = 0;
    SUBSCRIBETYPE_AUTO = 1;
    SUBSCRIBETYPE_DEFAULT = 100;
}
enum OldSubscribeStatus {
    OLD_SUBSCRIBE_STATUS_FIRST = 0;
    OLD_SUBSCRIBE_STATUS_RESUB = 1;
    OLD_SUBSCRIBE_STATUS_SUBIN_GRACE_PERIOD = 2;
    OLD_SUBSCRIBE_STATUS_SUB_NOTIN_GRACE_PERIOD = 3;
    OLD_SUBSCRIBE_STATUS_DEFAULT = 100;
}
enum SubscribingStatus {
    SUBSCRIBING_STATUS_UNKNOWN = 0;
    SUBSCRIBING_STATUS_ONCE = 1;
    SUBSCRIBING_STATUS_CIRCLE = 2;
    SUBSCRIBING_STATUS_CIRCLE_CANCEL = 3;
    SUBSCRIBING_STATUS_REFUND = 4;
    SUBSCRIBING_STATUS_IN_GRACE_PERIOD = 5;
    SUBSCRIBING_STATUS_NOT_IN_GRACE_PERIOD = 6;
}
enum LinkmicStatus
{
    Disable = 0;
    Enable = 1;
    Just_Following = 2;
    Multi_Linking = 3;
    Multi_Linking_Only_Following = 4;
}

enum MemberMessageAction {
    UNKNOWN = 0;
    JOINED = 1; // User Joined the Stream
    SUBSCRIBED = 3; // User Subscribed to the Host
    //?? = 26
    //?? = 27
    //?? = 50 (share?)
}

enum ControlAction {
    CONTROL_ACTION_FALLBACK_UNKNOWN = 0;
    CONTROL_ACTION_STREAM_PAUSED = 1;
    CONTROL_ACTION_STREAM_UNPAUSED = 2;
    CONTROL_ACTION_STREAM_ENDED = 3;
    CONTROL_ACTION_STREAM_SUSPENDED = 4;
}

enum LinkLayerMessageType
{
    Linker_Unknown = 0;
    Linker_Create = 1;
    Linker_Invite = 2;
    Linker_Apply = 3;
    Linker_Permit = 4;
    Linker_Reply = 5;
    Linker_Kick_Out = 6;
    Linker_Cancel_Apply = 7;
    Linker_Cancel_Invite = 8;
    Linker_Leave = 9;
    Linker_Finish = 10;
    Linker_List_Change = 11;
    Linker_Join_Direct = 12;
    Linker_Join_Group = 13;
    Linker_Permit_Group = 14;
    Linker_Cancel_Group = 15;
    Linker_Leave_Group = 16;
    Linker_P2P_Group_Change = 17;
    Linker_Group_Change = 18;
}

enum BarrageType
{
    BarrageType_Unknown = 0;
    EComOrdering = 1;
    EComBuying = 2;
    Normal = 3;
    Subscribe = 4;
    EventView = 5;
    EventRegistered = 6;
    SubscribeGift = 7;
    UserUpgrade = 8;
    GradeUserEntranceNotification = 9;
    FansLevelUpgrade = 10;
    FansLevelEntrance = 11;
    GamePartnership = 12;
}

enum EnvelopeBusinessType
{
    BusinessTypeUnknown = 0;
    BusinessTypeUserDiamond = 1;
    BusinessTypePlatformDiamond = 2;
    BusinessTypePlatformShell = 3;
    BusinessTypePortal = 4;
    BusinessTypePlatformMerch = 5;
    BusinessTypeEoYDiamond = 6;
    BusinessTypeFanClubGtM = 7;
}
enum EnvelopeFollowShowStatus {
    ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW_UNKNOWN = 0;
    ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW = 1;
    ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_NOT_SHOW = 2;
}

enum EnvelopeDisplay {
    ENVELOPE_DISPLAY_UNKNOWN = 0;
    ENVELOPE_DISPLAY_NEW = 1;
    ENVELOPE_DISPLAY_HIDE = 2;
}

enum CommonContentCase {
    COMMON_CONTENT_NOT_SET = 0;
    CREATE_CHANNEL_CONTENT = 100;
    LIST_CHANGE_CONTENT = 102;
    INVITE_CONTENT = 103;
    APPLY_CONTENT = 104;
    PERMIT_APPLY_CONTENT = 105;
    REPLY_INVITE_CONTENT = 106;
    KICK_OUT_CONTENT = 107;
    CANCEL_APPLY_CONTENT = 108;
    CANCEL_INVITE_CONTENT = 109;
    LEAVE_CONTENT = 110;
    FINISH_CONTENT = 111;
    JOIN_DIRECT_CONTENT = 112;
    JOIN_GROUP_CONTENT = 113;
    PERMIT_GROUP_CONTENT = 114;
    CANCEL_GROUP_CONTENT = 115;
    LEAVE_GROUP_CONTENT = 116;
    P2P_GROUP_CHANGE_CONTENT = 117;
    GROUP_CHANGE_CONTENT = 118;
}

enum LinkMessageType {
    TYPE_LINKER_UNKNOWN = 0;
    TYPE_LINKER_CREATE = 1;
    TYPE_LINKER_CLOSE = 2;
    TYPE_LINKER_INVITE = 3;
    TYPE_LINKER_APPLY = 4;
    TYPE_LINKER_REPLY = 5;
    TYPE_LINKER_ENTER = 6;
    TYPE_LINKER_LEAVE = 7;
    TYPE_LINKER_PERMIT = 8;
    TYPE_LINKER_CANCEL_INVITE = 9;
    TYPE_LINKER_WAITING_LIST_CHANGE = 10;
    TYPE_LINKER_LINKED_LIST_CHANGE = 11;
    TYPE_LINKER_UPDATE_USER = 12;
    TYPE_LINKER_KICK_OUT = 13;
    TYPE_LINKER_CANCEL_APPLY = 14;
    TYPE_LINKER_MUTE = 15;
    TYPE_LINKER_MATCH = 16;
    TYPE_LINKER_UPDATE_USER_SETTING = 17;
    TYPE_LINKER_MIC_IDX_UPDATE = 18;
    TYPE_LINKER_LEAVE_V2 = 19;
    TYPE_LINKER_WAITING_LIST_CHANGE_V2 = 20;
    TYPE_LINKER_LINKED_LIST_CHANGE_V2 = 21;
    TYPE_LINKER_COHOST_LIST_CHANGE = 22;
    TYPE_LINKER_MEDIA_CHANGE = 23;
    TYPE_LINKER_ACCEPT_NOTICE = 24;
    TYPE_LINKER_SYS_KICK_OUT = 101;
    TYPE_LINKMIC_USER_TOAST = 102;
}

enum MessageType {
    MESSAGE_TYPE_SUB_SUCCESS = 0;
    MESSAGE_TYPE_ANCHOR_REMINDER = 1;
    MESSAGE_TYPE_ENTER_ROOM_EXPIRE_SOON = 2;
    MESSAGE_TYPE_SUB_GOAL_CREATE_TO_ANCHOR = 3;
    MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_AUDIENCE = 4;
    MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_ANCHOR = 5;
    MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_USER_NOTICE = 6;
    MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_ANCHOR_NOTICE = 7;
    MESSAGE_TYPE_SUB_GIFT_T_RECEIVES_END_NOTICE = 8;
    MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ROOM_MESSAGE = 9;
    MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ANCHOR_NOTICE = 10;
    MESSAGE_TYPE_SUB_GIFT_LOW_VERSION_UPGRADE_NOTICE = 11;
    MESSAGE_TYPE_SUB_GIFT_USER_BUY_AU_TH_NOTICE = 12;
    MESSAGE_TYPE_SUB_COMMON_TEXT_NOTICE = 13;
    MESSAGE_TYPE_SUB_MODERATOR_PIN_PERK = 14;
}

enum Scene {
    SCENE_UNKNOWN = 0;
    SCENE_CO_HOST = 2;
    SCENE_MULTI_LIVE = 4;
}

enum RewardCondition {
    REWARD_CONDITION_SUBSCRIPTION = 0;
    REWARD_CONDITION_SUB_WAVE_CUSTOM = 1;
}

enum UserEmoteUploadSource {
    USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR = 0;
    USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER = 1;
    USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR = 2;
}

enum EmoteScene {
    EMOTE_SCENE_SUBSCRIPTION = 0;
    EMOTE_SCENE_GAME = 1;
}

enum PunishTypeId {
    PUNISH_TYPE_IDUN_KNOWN = 0;
    PUNISH_TYPE_ID_BAN_LINK_MIC = 9;
    PUNISH_TYPE_ID_BAN_GAME_PARTNERSHIP = 25;
    PUNISH_TYPE_ID_REMOVE_GAME_PARTNERSHIP = 26;
    PUNISH_TYPE_ID_BANCO_HOST_LINK_MIC = 55;
    PUNISH_TYPE_ID_AUTHORITY_LIMIT_MATCH = 57;
    PUNISH_TYPE_ID_BAN_VOICE_CHAT = 59;
    PUNISH_TYPE_ID_BAN_LIVE_GOAL = 64;
    PUNISH_TYPE_ID_VIEWER_LIMIT = 70;
}

enum MultiplierType {
    MULTIPLIER_TYPE_UNSPECIFIED = 0;
    MULTIPLIER_TYPE_CRITICAL_STRIKE = 1;
    MULTIPLIER_TYPE_TOP_2 = 2;
    MULTIPLIER_TYPE_TOP_3 = 3;
}

enum LinkmicGiftExpressionStrategy {
    LINKMIC_GIFT_EXPRESSION_STRATEGY_CONTROL_V_1 = 0;
    LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_1 = 1;
    LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_2 = 2;
}

enum GiftMessageVersion {
    GIFT_MESSAGE_VERSION_0 = 0;
    GIFT_MESSAGE_VERSION_1 = 1;
}

enum TagType {
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_UNKNOWN = 0;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_USER_GRADE = 1;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_LEVEL = 2;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_WATCH_ME_DAYS_AGO = 3;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_CUSTOM = 4;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_TITLE_GIFT = 5;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_JOINED_TEAM = 6;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_PAY_ACCOMPANY_DAYS = 7;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_SPONSOR_GIFT_LAST_ROOM = 8;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MATCH_MVP_LAST_ROOM = 9;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_LARGE_AMOUNT_GIFT_LAST_ROOM = 10;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_COMMENT_LAST_ROOM = 11;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_TITLED_GIFT = 12;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MEET_ANNIVERSARY = 13;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_SLEEP = 14;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_SEND_HEART_ME = 15;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_JOIN_TEAM = 16;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_WATCH_LIVE = 17;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_COMMENT = 18;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT_TIMES = 19;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_WATCH_LIVE_DURATION = 20;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT = 21;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_LIVE_CONTRIBUTION_TOP = 22;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_JUST_UPGRADE = 28;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_WATCH_DURATION = 29;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_COMMENT_NUM = 30;
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_GIFT_SENT_NUM = 31;
}

enum TopicActionType {
    TOPIC_ACTION_TYPE_UNKNOWN = 0;
    TOPIC_ACTION_TYPE_FOLLOW = 1;
}

enum UserMetricsType {
    USER_METRICS_TYPE_UNKNOWN = 0;
    USER_METRICS_TYPE_GRADE = 1;
    USER_METRICS_TYPE_SUBSCRIBE = 2;
    USER_METRICS_TYPE_FOLLOW = 3;
    USER_METRICS_TYPE_FANS_CLUB = 4;
    USER_METRICS_TYPE_TOP_VIEWER = 5;
    USER_METRICS_TYPE_GIFT = 6;
}

enum GiftMessageIgnoreConfig {
    GIFT_MESSAGE_IGNORE_CONFIG_NOT_IGNORE = 0;
    GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY = 1;
    GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_PS_M = 2;
    GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY_AND_PS_M = 3;
}

enum HorizontalOnclickTriggerType {
    HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_UNKNOWN = 0;
    HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_LEFT = 1;
    HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_MIDDLE = 2;
    HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_RIGHT = 3;
    HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_ALL_AREA = 4;
}

enum ShowType {
    SHOW_TYPE_NORMAL = 0;
    SHOW_TYPE_FADE_IN_OUT = 1;
}

enum RenderType {
    RENDER_TYPE_NATIVE = 0;
    RENDER_TYPE_HYBRID = 1;
    RENDER_TYPE_ALPHA = 2;
}

enum IconDisplayType {
    ICON_DISPLAY_TYPE_IMAGE = 0;
    ICON_DISPLAY_TYPE_BADGE = 1;
}

enum CommentTag {
    COMMENT_TAG_NORMAL = 0;
    COMMENT_TAG_CANDIDATE = 1;
    COMMENT_TAG_OVERAGE = 2;
}

enum PerceptionDialogIconType {
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE = 0;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING = 1;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC = 2;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC = 3;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE = 4;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX = 5;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE = 6;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED = 7;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT = 11;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS = 12;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH = 13;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL = 14;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION = 15;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT = 16;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING = 17;
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON = 18;
}

enum GoalMessageSource {
    GOAL_MESSAGE_SOURCE_UNKNOWN = 0;
    GOAL_MESSAGE_SOURCE_COMMIT = 1;
    GOAL_MESSAGE_SOURCE_PROGRESS_UPDATE = 2;
    GOAL_MESSAGE_SOURCE_PIN = 3;
    GOAL_MESSAGE_SOURCE_UNPIN = 4;
    GOAL_MESSAGE_SOURCE_REVIEW_CALLBACK = 5;
    GOAL_MESSAGE_SOURCE_SUSPEND = 6;
    GOAL_MESSAGE_SOURCE_CHALLENGE_PROMPT = 7;
}

enum ExhibitionType {
    EXHIBITION_TYPE_DEFAULT = 0;
    EXHIBITION_TYPE_FOLD = 1;
    EXHIBITION_TYPE_PUBLIC_SCREEN = 2;
}

enum GiftSource {
    GIFT_SOURCE_UNKNOWN = 0;
    GIFT_SOURCE_PLATFORM = 1;
    GIFT_SOURCE_USER_BUY_RANDOM = 2;
    GIFT_SOURCE_USER_BUY_SPECIFIC = 3;
}

enum MessageDisplayStyle {
    MESSAGE_DISPLAY_STYLE_DEFAULT = 0;
    MESSAGE_DISPLAY_STYLE_POPUP = 1;
}

enum ProfitRankType {
    PROFIT_RANK_TYPE_TYPE_HOURLY_RANK = 0;
    PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK = 1;
    PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK = 2;
    PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY = 3;
    PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK = 4;
    PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE = 5;
    PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY = 6;
    PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY = 7;
    PROFIT_RANK_TYPE_TYPE_DAILY_RANK = 8;
    PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK = 9;
    PROFIT_RANK_TYPE_TYPE_GAME_RANK = 10;
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME = 11;
    PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK = 12;
    PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE = 13;
    PROFIT_RANK_TYPE_DAILY_ROOKIE = 14;
    PROFIT_RANK_TYPE_TYPE_TEAM_RANK = 15;
    PROFIT_RANK_TYPE_TYPE_CLASS_RANK = 16;
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G = 20;
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B = 21;
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE = 22;
    PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE = 23;
    PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO = 24;
    PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE = 25;
}

enum UnionAnimationInfoType {
    UNION_ANIMATION_INFO_TYPE_NO_UNION_ANIMATION = 0;
    UNION_ANIMATION_INFO_TYPE_LOOP = 1;
    UNION_ANIMATION_INFO_TYPE_LOCK = 2;
}

enum DisplayStyle {
    DISPLAY_STYLE_NORMAL = 0;
    DISPLAY_STYLE_STAY = 1;
    DISPLAY_STYLE_CHAT = 2;
}

enum HitABStatus {
    HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT = 0;
    HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT = 1;
    HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT = 2;
}

enum PollKind {
    POLL_KIND_NORMAL = 0;
    POLL_KIND_GIFT = 1;
    POLL_KIND_CUSTOMIZABLE = 2;
    POLL_KIND_CUSTOMIZABLE_GIFT = 3;
    POLL_KIND_QUICK_GIFT = 4;
    POLL_KIND_EMOTE = 5;
}

enum PollTemplateStatus {
    POLL_TEMPLATE_STATUS_TO_BE_REVIEWED = 0;
    POLL_TEMPLATE_STATUS_UNDER_REVIEW = 1;
    POLL_TEMPLATE_STATUS_REVIEWED = 2;
    POLL_TEMPLATE_STATUS_REFUSED = 3;
}

enum PollAppealStatus {
    POLL_APPEAL_STATUS_UNKNOWN = 0;
    POLL_APPEAL_STATUS_PASS = 1;
    POLL_APPEAL_STATUS_FAIL = 2;
}

enum RankTestMessageScene {
    RANK_TEST_MESSAGE_SCENE_UNKNOWN = 0;
    RANK_TEST_MESSAGE_SCENE_ONLINE_AUDIENCE_TOP_N_UPDATE_PUBLIC_SCREEN = 1;
}

enum TriggerReason {
    TRIGGER_REASON_UNKNOWN = 0;
    TRIGGER_REASON_SCORE_UPDATE = 1;
    TRIGGER_REASON_BATTLE_END = 2;
    TRIGGER_REASON_OPT_OUT_UPDATE = 3;
    TRIGGER_REASON_KEEP_ALIVE = 4;
}

enum Reason {
    REASON_TIME_UP = 0;
    REASON_CUT_SHORT = 1;
}

enum BattleTaskMessageType {
    BATTLE_TASK_MESSAGE_TYPE_START = 0;
    BATTLE_TASK_MESSAGE_TYPE_TASK_UPDATE = 1;
    BATTLE_TASK_MESSAGE_TYPE_TASK_SETTLE = 2;
    BATTLE_TASK_MESSAGE_TYPE_REWARD_SETTLE = 3;
}

enum RewardStatus {
    REWARD_STATUS_SUCCEED = 0;
    REWARD_STATUS_FAILED = 1;
}

enum BattleAction {
    BATTLE_ACTION_UNKNOWN = 0;
    BATTLE_ACTION_INVITE = 1;
    BATTLE_ACTION_REJECT = 2;
    BATTLE_ACTION_CANCEL = 3;
    BATTLE_ACTION_OPEN = 4;
    BATTLE_ACTION_FINISH = 5;
    BATTLE_ACTION_CUT_SHORT = 6;
    BATTLE_ACTION_ACCEPT = 7;
    BATTLE_ACTION_QUIT_APPLY = 8;
    BATTLE_ACTION_DECLINE_QUIT = 9;
    BATTLE_ACTION_DECLINE_OFF_QUIT = 10;
    BATTLE_ACTION_LEAVE_LINK_MIC = 11;
}

enum Result {
    RESULT_WIN = 0;
    RESULT_LOSE = 1;
    RESULT_DRAW = 2;
}

enum GiftPermissionType {
    GIFT_PERMISSION_TYPE_UNKNOWN_TYPE = 0;
    GIFT_PERMISSION_TYPE_NO_GIFT_PERMISSION = 1;
    GIFT_PERMISSION_TYPE_ANCHOR_CLOSE = 2;
    GIFT_PERMISSION_TYPE_HAS_GIFT_PERMISSION = 3;
    GIFT_PERMISSION_TYPE_ANCHOR_BANNED = 4;
}

enum BattleABTestType {
    BATTLE_A_B_TEST_TYPE_UNKNOWN_AB_TEST_TYPE = 0;
    BATTLE_A_B_TEST_TYPE_MEANWHILE_INVITE = 1;
    BATTLE_A_B_TEST_TYPE_SPECIFIED_GIFT = 2;
    BATTLE_A_B_TEST_TYPE_RT_C_MESSAGE_CHANNEL = 3;
    BATTLE_A_B_TEST_TYPE_CONNECTION_TIME_OUT = 4;
    BATTLE_A_B_TEST_TYPE_REMATCH_SKIP_TEAMMATE = 5;
    BATTLE_A_B_TEST_TYPE_OPT_INVITEE_4048 = 6;
    BATTLE_A_B_TEST_TYPE_BATTLE_AB_TEST_TYPE_TIME_CALIBRATE = 7;
}

enum PlayScene {
    PLAY_SCENE_UNKNOWN = 0;
    PLAY_SCENE_COUNTDOWN_FOR_ALL = 1;
    PLAY_SCENE_COUNTDOWN_FOR_SINGLE = 2;
    PLAY_SCENE_LIVE_SHOW = 3;
    PLAY_SCENE_AIG_C = 4;
    PLAY_SCENE_KARAOKE = 5;
    PLAY_SCENE_DRAW_GUESS = 6;
    PLAY_SCENE_ENLARGE_GRID = 7;
    PLAY_SCENE_GIFT_PRIORITY_LINK = 8;
    PLAY_SCENE_GIFT_THRESHOLD_LINK = 9;
    PLAY_SCENE_NOTICE_BOARD = 10;
    PLAY_SCENE_PLAY_BOOK = 11;
    PLAY_SCENE_GUEST_SHOWDOWN = 12;
}

enum LinkType {
    LINK_TYPE_TYPE_UNKNOWN = 0;
    LINK_TYPE_TYPE_VIDEO = 1;
    LINK_TYPE_TYPE_AUDIO = 2;
    LINK_TYPE_TYPE_VIRTUAL = 3;
}

enum LinkSilenceStatus {
    LINK_SILENCE_STATUS_STATUS_UN_SILENCE = 0;
    LINK_SILENCE_STATUS_STATUS_SILENCE_BY_SELF = 1;
    LINK_SILENCE_STATUS_STATUS_SILENCE_BY_OWNER = 2;
}

enum LinkmicRoleType {
    LINKMIC_ROLE_TYPE_ROLE_TYPE_UNKOWN = 0;
    LINKMIC_ROLE_TYPE_LEADER = 1;
    LINKMIC_ROLE_TYPE_PLAYER = 2;
    LINKMIC_ROLE_TYPE_INVITEE = 3;
}

enum LinkRoleType {
    LINK_ROLE_TYPE_TYPE_ROLE_TYPE_UNKOWN = 0;
    LINK_ROLE_TYPE_TYPE_LEADER = 1;
    LINK_ROLE_TYPE_TYPE_PLAYER = 2;
    LINK_ROLE_TYPE_TYPE_INVITEE = 3;
    LINK_ROLE_TYPE_TYPE_APPLIER = 4;
}

enum MuteStatus {
    MUTE_STATUS_MUTE = 0;
    MUTE_STATUS_UN_MUTE = 1;
}

enum GuestMicCameraManageOp {
    GUEST_MIC_CAMERA_MANAGE_OP_OPEN_MIC = 0;
    GUEST_MIC_CAMERA_MANAGE_OP_OPEN_CAMERA = 1;
    GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC = 2;
    GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_CAMERA = 3;
    GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC_PUNISH = 4;
}

enum GuestMicCameraChangeScene {
    GUEST_MIC_CAMERA_CHANGE_SCENE_CHANGE_SCENE_UNKNOWN = 0;
    GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_ANCHOR_AUTO = 1;
    GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SERVER_NORMAL = 2;
    GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SHOW_END = 3;
}

enum LinkMicUserAdminType {
    LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE = 0;
    LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE = 1;
    LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE = 2;
}

enum LinkmicMultiLiveEnum {
    LINKMIC_MULTI_LIVE_ENUM_DEFAULT = 0;
    LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT = 1;
}

enum PollEndType {
    POLL_END_TYPE_POLL_END_BY_TIME = 0;
    POLL_END_TYPE_POLL_END_BY_OWNER = 1;
    POLL_END_TYPE_POLL_END_BY_OTHER = 2;
    POLL_END_TYPE_POLL_END_BY_ADMIN = 3;
}

enum CohostABTestType {
    COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_UNKNOWN = 0;
    COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_LINK_TIME_OUT_STRATEGY = 1;
    COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_RESERVATION = 2;
    COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_QUICK_PAIR_NEW_ARCH_SWITCH = 3;
    COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_INVITATION_TEXT = 4;
}

enum OptPairStatus {
    OPT_PAIR_STATUS_UNKNOWN = 0;
    OPT_PAIR_STATUS_OFFLINE = 1;
    OPT_PAIR_STATUS_FINISHED = 2;
}

enum ContentPositionType {
    CONTENT_POSITION_TYPE_UNKNOWN = 0;
    CONTENT_POSITION_TYPE_STREAM = 1;
    CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT = 2;
    CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE = 3;
}

enum MultiGuestOutsideRoomInviteSource {
    MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_UNKNOWN = 0;
    MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_PANEL = 1;
    MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_CAPSULE = 2;
    MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_EMPTY_POSITION = 3;
}

enum LinkUserType {
    LINK_USER_TYPE_DEFAULT = 0;
    LINK_USER_TYPE_KARAOKE = 1;
}

enum ContentInviteSource {
    CONTENT_INVITE_SOURCE_INVITE_SOURCE_UNKNOWN = 0;
    CONTENT_INVITE_SOURCE_INVITE_SOURCE_PANEL_GO_LIVE = 1;
    CONTENT_INVITE_SOURCE_INVITE_SOURCE_MUTUAL_NOTICE = 2;
    CONTENT_INVITE_SOURCE_INVITE_SOURCE_USER_PROFILE = 3;
    CONTENT_INVITE_SOURCE_INVITE_SOURCE_RESERVE = 4;
}

enum LinkmicShareRevenueSetting {
    LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_NOT_SET = 0;
    LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_OPEN = 1;
    LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_CLOSE = 2;
}

enum PosIdentityType {
    POS_IDENTITY_TYPE_IDENTITY_EMPTY_SLOT = 0;
    POS_IDENTITY_TYPE_IDENTITY_RT_C_USER_ID = 1;
    POS_IDENTITY_TYPE_IDENTITY_RT_C_STREAM_ID = 2;
    POS_IDENTITY_TYPE_IDENTITY_LIVE_USER_ID = 3;
}

enum JoinType {
    JOIN_TYPE_UNKNOWN = 0;
    JOIN_TYPE_CHANNEL_APPLY = 1;
    JOIN_TYPE_CHANNEL_INVITE = 2;
    JOIN_TYPE_GROUP_APPLY = 100;
    JOIN_TYPE_GROUP_APPLY_FOLLOW = 101;
    JOIN_TYPE_GROUP_INVITE = 102;
    JOIN_TYPE_GROUP_INVITE_FOLLOW = 103;
    JOIN_TYPE_GROUP_OWNER_JOIN = 104;
}

enum CohostLayoutMode {
    COHOST_LAYOUT_MODE_NORMAL = 0;
    COHOST_LAYOUT_MODE_SCREEN_SHARE = 1;
}

enum TagClassification {
    TAG_CLASSIFICATION_UNKNOWN = 0;
    TAG_CLASSIFICATION_COHOST_HISTORY = 1;
    TAG_CLASSIFICATION_FIRST_DEGREE_RELATION = 2;
    TAG_CLASSIFICATION_SECOND_DEGREE_RELATION = 3;
    TAG_CLASSIFICATION_RANK = 4;
    TAG_CLASSIFICATION_SIMILAR_INTERESTS = 5;
}

enum SourceType {
    SOURCE_TYPE_UNKNOWN = 0;
    SOURCE_TYPE_FRIEND_LIST = 1;
    SOURCE_TYPE_RECOMMEND_LIST = 2;
    SOURCE_TYPE_RECENT = 3;
    SOURCE_TYPE_OTHER_FOLLOW = 4;
    SOURCE_TYPE_QUICK_PAIR = 5;
    SOURCE_TYPE_ACTIVITY = 6;
    SOURCE_TYPE_QUICK_RECOMMEND = 7;
    SOURCE_TYPE_OFFICIAL_CHANNEL = 8;
    SOURCE_TYPE_BEST_TEAMMATE = 9;
    SOURCE_TYPE_RESERVATION = 10;
    SOURCE_TYPE_PAIRING = 11;
    SOURCE_TYPE_PAIRING_ON_RESERVATION = 12;
    SOURCE_TYPE_TOPIC_QUICK_PAIR = 13;
    SOURCE_TYPE_TOPIC_QUICK_RECOMMEND = 14;
    SOURCE_TYPE_ONLINE_FRIEND_CAPSULE = 15;
    SOURCE_TYPE_WEEKLY_RANK = 20;
    SOURCE_TYPE_HOURLY_RANK = 21;
    SOURCE_TYPE_WEEKLY_RISING = 23;
    SOURCE_TYPE_WEEKLY_ROOKIE = 24;
    SOURCE_TYPE_CONNECTION_LIST = 25;
    SOURCE_TYPE_DAILY_RANK = 26;
    SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME = 27;
    SOURCE_TYPE_RESERVATION_BUBBLE = 28;
    SOURCE_TYPE_PAIRING_BUBBLE = 29;
    SOURCE_TYPE_LEAGUE_PHASE_ONE = 30;
    SOURCE_TYPE_LEAGUE_PHASE_TWO = 31;
    SOURCE_TYPE_LEAGUE_PHASE_THREE = 32;
    SOURCE_TYPE_DAILY_ROOKIE = 33;
    SOURCE_TYPE_MAY_KNOW_LIST = 34;
    SOURCE_TYPE_BANNER = 35;
    SOURCE_TYPE_FANS_TEAM_RANK = 36;
    SOURCE_TYPE_SEARCH = 37;
    SOURCE_TYPE_E_OY_RANK_LIST = 38;
    SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK = 39;
    SOURCE_TYPE_CREATOR_CLASS_RANK = 40;
    SOURCE_TYPE_HISTORY = 41;
    SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST = 43;
}

enum BattleType {
    BATTLE_TYPE_UNKNOWN_BATTLE_TYPE = 0;
    BATTLE_TYPE_NORMAL_BATTLE = 1;
    BATTLE_TYPE_TEAM_BATTLE = 2;
    BATTLE_TYPE_INDIVIDUAL_BATTLE = 3;
    BATTLE_TYPE_1_V_N = 4;
    BATTLE_TYPE_TAKE_THE_STAGE = 51;
    BATTLE_TYPE_GROUP_SHOW = 52;
}

enum BattleInviteType {
    BATTLE_INVITE_TYPE_NORMAL = 0;
    BATTLE_INVITE_TYPE_AGAIN = 1;
}

/*
Synthetic protobuf defs NOT encoded in the APK's *_ProtoDecoder.java classes (i.e. hidden)
 */


// Heartbeat message
message HeartbeatMessage {
    uint64 roomId = 1;
}

// Incoming & outbound messages
message WebcastPushFrame {
    int64 seqId = 1;
    int64 logId = 2;
    int64 service = 3;
    int64 method = 4;
    map<string, string> headers = 5;
    string payloadEncoding = 6;
    string payloadType = 7;
    bytes payload = 8;
}

message Message {
    string type = 1;
    bytes binary = 2;
}

message WebsocketParam {
    string name = 1;
    string value = 2;
}

message WebcastRoomUserSeqMessage {
    CommonMessageData common = 1;
    int32 viewerCount = 3;
    repeated Contributor ranksList = 2;
    string popStr = 4;
    repeated Contributor seatsList = 5;
    int64 popularity = 6;
    int32 totalUser = 7;
    int64 anonymous = 8;

    message Contributor {
        int32 coinCount = 1;
        User user = 2;
        int32 rank = 3;
        int64 delta = 4;
    }

}


message ImageModel {
    repeated string m_urls = 1;
    string m_uri = 2;
    int32 height = 3;
    int32 width = 4;
    string avg_color = 5;
    int32 image_type = 6;
    string schema = 7;
    Content content = 8;
    bool is_animated = 9;

    message Content {
        string name = 1;
        string font_color = 2;
        int64 level = 3;

    }
}

message WebcastChatMessage {
    CommonMessageData common = 1;
    User user = 2;
    string comment = 3;
    bool visible_to_sender = 4;
    ImageModel background = 5;
    string full_screen_text_color = 6;
    ImageModel background_image_v2 = 7;
    PublicAreaCommon public_area_common = 9;
    ImageModel gift_image = 10;
    int32 input_type = 11;
    User at_user = 12;
    repeated WebcastSubEmote emotes = 13;
    string content_language = 14;
    MsgFilter msg_filter = 15;
    int32 quick_chat_scene = 16;
    int32 communityflagged_status = 17;
    repeated CommentQualityScore comment_quality_scores = 19;
    UserIdentity user_identity = 18;
    repeated CommentTag comment_tag = 20;
    PublicAreaMessageCommon public_area_message_common = 21;
    int64 screen_time = 22;
    string signature = 23;
    string signature_version = 24;
    string ec_streamer_key = 25;

    message UserIdentity {
        bool is_gift_giver_of_anchor = 1;
        bool is_subscriber_of_anchor = 2;
        bool is_mutual_following_with_anchor = 3;
        bool is_follower_of_anchor = 4;
        bool is_moderator_of_anchor = 5;
        bool is_anchor = 6;

    }

    message CommentQualityScore {
        string version = 1;
        int64 score = 2;
    }

    enum CommentTag {
        COMMENT_TAG_NORMAL = 0;
        COMMENT_TAG_CANDIDATE = 1;
        COMMENT_TAG_OVERAGE = 2;
    }


}


message EmoteUploadInfo {
    int64 user_id = 1;
    optional UserEmoteUploadSource emote_upload_source = 2;
    User user_info = 3;
    string user_id_str = 4;

    enum UserEmoteUploadSource {
        USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR = 0;
        USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER = 1;
        USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR = 2;
    }
}



// Chat Emotes (Subscriber)
message WebcastEmoteChatMessage {
    CommonMessageData common = 1;
    User user = 2;
    repeated Emote emoteList = 3;
    MsgFilter msgFilter = 4;
    UserIdentity userIdentity = 5;
}

message WebcastSubEmote {
    int32 placeInComment = 1; //starting at 0, you insert the emote itself into the comment at that place
    EmoteDetails emote = 2;
}

message WebcastMemberMessage {
    CommonMessageData common = 1;
    User user = 2;
    MemberMessageAction action = 10;
    int32 memberCount = 3;
    User operator = 4;
    bool isSetToAdmin = 5;
    bool isTopUser = 6;
    int64 rankScore = 7;
    int64 topUserNo = 8;
    int64 enterType = 9;
    string actionDescription = 11;
    int64 userId = 12;
    EffectConfig effectConfig = 13;
    string popStr = 14;
    EffectConfig enterEffectConfig = 15;
    Image backgroundImage = 16;
    Image backgroundImageV2 = 17;
    Text anchorDisplayText = 18;
    string clientEnterSource = 19;
    string clientEnterType = 20;
    string clientLiveReason = 21;
    int64 actionDuration = 22;
    string userShareType = 23;
    DisplayStyle display_style = 24;
    map<int32, int32> admin_permissions = 25;
    int32 kick_source = 26;
    int64 allow_preview_time = 27;
    int64 last_subscription_action = 28;
    PublicAreaMessageCommon public_area_message_common = 29;
    int64 live_sub_only_tier = 30;
    int64 live_sub_only_month = 31;
    string ec_streamer_key = 32;
    int64 show_wave = 33;
    WaveAlgorithmData wave_algorithm_data = 34;
    HitABStatus hit_ab_status = 35;

    // @EffectConfig
    // proto.webcast.im.MemberMessage
    // C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
    message EffectConfig {
        int64 type = 1;
        Image icon = 2;
        int64 avatarPos = 3;
        Text text = 4;
        Image textIcon = 5;
        int32 stayTime = 6;
        int64 animAssetId = 7;
        Image badge = 8;
        repeated int64 flexSettingArrayList = 9;
    }

    message WaveAlgorithmData {
        string algorithm_version = 1;
        bool is_alg_hit = 2;
        string predict_score = 3;
        bool is_rewatch = 4;
        bool is_follow = 5;
    }

    enum DisplayStyle {
        DISPLAY_STYLE_NORMAL = 0;
        DISPLAY_STYLE_STAY = 1;
        DISPLAY_STYLE_CHAT = 2;
    }
    enum HitABStatus {
        HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT = 0;
        HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT = 1;
        HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT = 2;
    }

    message EffectConfigBean {
        int32 type = 1;
        ImageModel icon = 2;
        Text text_key = 4;
        ImageModel badge = 8;
    }

}

message WebcastGiftMessage {
    CommonMessageData common = 1;
    int32 giftId = 2;
    User user = 7;
    int32 repeatEnd = 9;
    uint64 groupId = 11;
    Gift giftDetails = 15;
    string monitorExtra = 22;
    int64 fanTicketCount = 3;
    int32 groupCount = 4;
    int32 repeatCount = 5;
    int32 comboCount = 6;
    User toUser = 8;
    TextEffect text_effect = 10;
    int64 incomeTaskgifts = 12;
    int64 roomFanTicketCount = 13;
    GiftIMPriority priority = 14;
    string logId = 16;
    int64 sendType = 17;
    PublicAreaCommon public_area_common = 18;
    Text tray_display_text = 19;
    int64 banned_display_effects = 20;
    GiftTrayInfo m_tray_info = 21;
    GiftMonitorInfo gift_extra = 23;
    int64 colorId = 24;
    bool isFirstSent = 25;
    Text display_text_for_anchor = 26;
    Text display_text_for_audience = 27;
    string orderId = 28;
    GiftsBoxInfo gifts_in_box = 29;
    MsgFilter msg_filter = 30;
    repeated LynxGiftExtra lynx_extra = 31;
    UserIdentity userIdentity = 32;
    MatchInfo match_info = 33;
    LinkmicGiftExpressionStrategy linkmic_gift_expression_strategy = 34;
    FlyingMicResources flying_mic_resources = 35;
    bool disable_gift_tracking = 36;
    AssetsModel asset = 37;
    GiftMessageVersion version = 38;
    repeated SponsorshipInfo sponsorship_info = 39;
    FlyingMicResources flying_mic_resources_v2 = 40;
    PublicAreaMessageCommon public_area_message_common = 41;
    string signature = 42;
    string signature_version = 43;
    bool multi_generate_message = 44;
    string to_member_id = 45;
    int64 to_member_id_int = 46;
    string to_member_nickname = 47;
    InteractiveGiftInfo interactive_gift_info = 48;

    message InteractiveGiftInfo {
        int64 cross_screen_delay = 1;
        int64 cross_screen_role = 2;
        GiftMessageIgnoreConfig ignore_config = 3;
        int64 uniq_id = 4;
        int64 to_user_team_id = 5;
    }

    message GiftIMPriority {
        repeated int64 queueSizesList = 1;
        int64 selfQueuePriority = 2;
        int64 priority = 3;
    }

    message TextEffect {
        Detail portrait_detail = 1;
        Detail landscape_detail = 2;

        message Detail {
            Text text = 1;
            int32 text_font_size = 2;
            Image background = 3;
            int64 start = 4;
            int64 duration = 5;
            int32 x = 6;
            int32 y = 7;
            int32 width = 8;
            int32 height = 9;
            int32 shadow_dx = 10;
            int32 shadow_dy = 11;
            int32 shadow_radius = 12;
            string shadow_color = 13;
            string stroke_color = 14;
            int32 stroke_width = 15;
        }
    }

    message GiftTrayInfo {
        Image m_dynamic_img = 1;
        bool can_mirror = 2;
        Image tray_normal_bg_img = 3;
        repeated string tray_normal_bg_color = 4;
        Image tray_small_bg_img = 5;
        repeated string tray_small_bg_color = 6;
        Text right_tag_text = 7;
        Image right_tag_bg_img = 8;
        repeated string right_tag_bg_color = 9;
        string tray_name_text_color = 10;
        string tray_desc_text_color = 11;
        string right_tag_jump_schema = 12;
    }

    message GiftMonitorInfo {
        int64 anchor_id = 1;
        int64 profit_api_message_dur = 2;
        int64 send_gift_profit_api_start_ms = 3;
        int64 send_gift_profit_core_start_ms = 4;
        int64 send_gift_req_start_ms = 5;
        int64 send_gift_send_message_success_ms = 6;
        int64 send_profit_api_dur = 7;
        int64 to_user_id = 8;
        int64 send_gift_start_client_local_ms = 9;
        string from_platform = 10;
        string from_version = 11;
    }

    message MatchInfo {
        int64 critical = 1;
        bool effect_card_in_use = 2;
        MultiplierType multiplier_type = 3;
        int64 multiplier_value = 4;
    }

    message GiftsBoxInfo {
        repeated GiftInfoInBox gifts = 1;

        message GiftInfoInBox {
            int64 gift_id = 1;
            int64 effect_id = 2;
            int64 color_id = 3;
            int32 remain_times = 4;
            AssetsModel asset = 5;

            message AssetsModel {
                string name = 1;
                string resource_uri = 2;
                ResourceModel resource_model = 4;
                string describe = 5;
                int64 id = 6;
                int32 resource_type = 7;
                string md5 = 8;
                int64 size = 9;
                LokiExtraContent loki_extra_content = 10;
                int32 download_type = 26;
                ResourceModel resource_byte_v_c1_model = 28;
                string bytevc1_md5 = 29;
                repeated VideoResource video_resource_list = 30;
                FaceRecognitionMeta face_recognition_archive_meta = 31;
                string lynx_url_settings_key = 32;
                int32 downgrade_resource_type = 33;
                AssetExtra asset_extra = 34;
                int32 sticker_asset_variant = 35;
                bool immediate_download = 36;
                int32 sticker_asset_variant_reason = 37;

                message AssetExtra {
                    string effect_starling_key = 1;
                }

                message ResourceModel {
                    repeated string url_list = 1;
                    string uri = 2;
                }

                message LokiExtraContent {
                    string gift_type = 1;
                    int64 gift_duration = 2;
                    bool need_screen_shot = 3;
                    bool ismulti_frame = 4;
                    string view_overlay = 5;
                    BEFViewRenderSize bef_view_render_size = 6;
                    int32 bef_view_render_f_p_s = 7;
                    int32 bef_view_fit_mode = 8;
                    string model_names = 9;
                    repeated string requirements = 10;

                    message BEFViewRenderSize {
                        int32 with = 1;
                        int32 height = 2;
                    }
                }

                message VideoResource {
                    string video_type_name = 1;
                    ResourceModel video_url = 2;
                    string video_md5 = 3;
                }

                message FaceRecognitionMeta {
                    string version = 1;
                    repeated string requirements = 2;
                    string model_names = 3;
                    string sdk_extra = 4;
                }
            }
        }
    }

    message AssetsModel {
        string name = 1;
        string resource_uri = 2;
        ResourceModel resource_model = 4;
        string describe = 5;
        int64 id = 6;
        int32 resource_type = 7;
        string md5 = 8;
        int64 size = 9;
        LokiExtraContent loki_extra_content = 10;
        int32 download_type = 26;
        ResourceModel resource_byte_v_c1_model = 28;
        string bytevc1_md5 = 29;
        repeated VideoResource video_resource_list = 30;
        FaceRecognitionMeta face_recognition_archive_meta = 31;
        string lynx_url_settings_key = 32;
        int32 downgrade_resource_type = 33;
        AssetExtra asset_extra = 34;
        int32 sticker_asset_variant = 35;
        bool immediate_download = 36;
        int32 sticker_asset_variant_reason = 37;

        message AssetExtra {
            string effect_starling_key = 1;
        }

        message ResourceModel {
            repeated string url_list = 1;
            string uri = 2;
        }

        message LokiExtraContent {
            string gift_type = 1;
            int64 gift_duration = 2;
            bool need_screen_shot = 3;
            bool ismulti_frame = 4;
            string view_overlay = 5;
            BEFViewRenderSize bef_view_render_size = 6;
            int32 bef_view_render_f_p_s = 7;
            int32 bef_view_fit_mode = 8;
            string model_names = 9;
            repeated string requirements = 10;

            message BEFViewRenderSize {
                int32 with = 1;
                int32 height = 2;
            }
        }

        message VideoResource {
            string video_type_name = 1;
            ResourceModel video_url = 2;
            string video_md5 = 3;
        }

        message FaceRecognitionMeta {
            string version = 1;
            repeated string requirements = 2;
            string model_names = 3;
            string sdk_extra = 4;
        }
    }

    message LynxGiftExtra {
        int64 id = 1;
        int64 code = 2;
        int64 type = 3;
        repeated string params = 4;
        string extra = 5;
    }

    message FlyingMicResources {
        Image path_image = 1;
        Image mic_image = 2;
        repeated TransitionConfig transition_configs = 3;

        message TransitionConfig {
            int64 config_id = 1;
            Image resource_image = 2;
        }
    }

    message SponsorshipInfo {
        int64 gift_id = 1;
        int64 sponsor_id = 2;
        bool light_gift_up = 3;
        string unlighted_gift_icon = 4;
        string gift_gallery_detail_page_scheme_url = 5;
        bool gift_gallery_click_sponsor = 6;
        bool become_all_sponsored = 21;
    }

}




// Battle start
message WebcastLinkMicBattle {
    CommonMessageData common = 1;
    int64 battle_id = 2;
    BattleSetting battle_setting = 3;
    BattleAction action = 4;
    map<int64, BattleResult> battle_result = 5;
    BattleDisplayConfig m_battle_display_config = 6;
    GiftPermissionType invitee_gift_permission_type = 8;
    map<int64, BattleUserArmies> armies = 9;
    map<int64, BattleUserInfo> anchor_info = 10;
    string bubble_text = 11;
    repeated SupportedActionsWrapper supported_actions = 12;
    map<int64, BattleComboInfo> battle_combos = 13;
    repeated TeamUsersInfo team_users = 14;
    repeated BattleInviteeGiftPermission invitee_gift_permission_types = 15;
    int64 action_by_user_id = 16;
    repeated BattleTeamResult team_battle_result = 17;
    repeated BattleTeamUserArmies team_armies = 18;
    repeated BattleABTestSetting abtest_settings = 19;
    TeamMatchCampaign team_match_campaign = 20;
    HighScoreControlCfg fuzzy_display_config_v2 = 21;

    message TeamMatchCampaign {
        repeated BestTeammateRelation best_teammate_relation = 1;
        repeated int64 start_sfx_team_id = 2;
        bool has_team_match_mvp_sfx = 3;

        message BestTeammateRelation {
            int64 user_id = 1;
            int64 best_teammate_id = 2;
        }
    }

    message BattleTeamResult {
        int64 team_id = 1;
        repeated BattleTeamUser team_users = 2;
        int32 result = 3;
        int64 total_score = 4;
    }

    message BattleInviteeGiftPermission {
        int64 user_id = 1;
        int32 gift_permission_type = 2;
    }

    message SupportedActionsWrapper {
        int64 action_type = 1;
    }

    message TeamUsersInfo {
        int64 team_id = 1;
        repeated int64 user_ids = 2;
    }

    message BattleComboInfo {
        int64 user_id = 1;
        int64 combo_status = 2;
        int64 combo_count = 3;
        string combo_icon_url = 4;
        int32 combo_type = 5;
        string combo_rule_guide_schema = 6;
    }

    message BattleResult {
        int64 user_id = 1;
        Result result = 2;
        int64 score = 3;
    }

    message BattleDisplayConfig {
        int32 threshold = 1;
        string text = 2;
        int32 diff_threshold = 3;
        string diff_text = 4;
        ExemptStrategy exempt_strategy = 5;

        message ExemptStrategy {
            bool exempt_both_host = 1;
            int32 exempt_audience_top = 2;
        }
    }

    message BattleUserInfo {
        BattleBaseUserInfo user = 1;
        repeated BattleRivalTag tags = 2;

        message BattleBaseUserInfo {
            int64 user_id = 1;
            string nick_name = 2;
            Image avatar_thumb = 3;
            string display_id = 4;
        }

        message BattleRivalTag {
            Image bg_image = 1;
            Image icon_image = 2;
            string content = 3;
        }
    }

    message BattleABTestSetting {
        int64 uid = 1;
        BattleABTestList ab_test_list = 2;

        message BattleABTestList {
            repeated BattleABTest ab_test_list = 1;

            message BattleABTest {
                BattleABTestType ab_test_type = 1;
                int32 group = 2;
            }
        }
    }

}


// Battle status
message WebcastLinkMicArmies {
    CommonMessageData common = 1;
    int64 battle_id = 2;
    map<int64, BattleUserArmies> battleItems = 3;
    int64 channel_id = 4;
    int64 gift_sent_time = 5;
    int64 score_update_time = 6;
    TriggerReason battleStatus = 7;
    int64 from_user_id = 8;
    int64 gift_id = 9;
    int32 gift_count = 10;
    Image gif_icon_image = 11;
    int32 total_diamond_count = 12;
    int32 repeat_count = 13;
    repeated BattleTeamUserArmies team_armies = 14;
    bool trigger_critical_strike = 15;
    bool has_team_match_mvp_sfx = 16;
    string log_id = 17;
    BattleSetting battle_settings = 18;
    HighScoreControlCfg fuzzy_display_config_v2 = 19;
}

message WebcastLinkMicArmiesItems {
    uint64 hostUserId = 1;
    repeated WebcastLinkMicArmiesGroup battleGroups = 2;
}

message WebcastLinkMicArmiesGroup {
    repeated User users = 1;
    int32 points = 2;
}


// Follow & share event
message WebcastSocialMessage {
    CommonMessageData common = 1;
    User user = 2;
    int64 shareType = 3;
    int64 action = 4;
    string shareTarget = 5;
    int32 followCount = 6;
    int64 shareDisplayStyle = 7;
    int32 shareCount = 8;
    PublicAreaMessageCommon public_area_message_common = 9;
    string signature = 10;
    string signature_version = 11;
    int64 show_duration_ms = 12;
}

// Like event (is only sent from time to time, not with every like)
message WebcastLikeMessage {
    CommonMessageData common = 1;
    int32 likeCount = 2;
    int32 totalLikeCount = 3;
    int32 color = 4;
    User user = 5;
    string icon = 6;
    repeated Image icons = 7;
    repeated SpecifiedDisplayText specified_display_text = 8;
    int64 effect_cnt = 9;
    repeated LikeEffect like_effect = 10;
    PublicAreaMessageCommon public_area_message_common = 11;
    int64 room_message_heat_level = 12;

}

message SpecifiedDisplayText {
    int64 uid = 1;
    Text display_text = 2;
}

message LikeEffect {
    int64 version = 1;
    int64 effect_cnt = 2;
    int64 effect_interval_ms = 3;
    int64 level = 4;
}


// New question event
message WebcastQuestionNewMessage {
    CommonMessageData common = 1;
    Question details = 2;

    message Question {
        int64 question_id = 1;
        string questionText = 2;
        int32 answer_status = 3;
        int64 create_time = 4;
        User user = 5;
        int32 create_from = 20;
        int32 answer_from = 21;
    }

}

// Contains UI information
message WebcastMessageEventDetails {
    string displayType = 1;
    string label = 2;
}

// Source: Co-opted https://github.com/zerodytrash/TikTok-Livestream-Chat-Connector/issues/19#issuecomment-1074150342
message WebcastLiveIntroMessage {
    CommonMessageData common = 1;
    int64 roomId = 2;
    AuditStatus auditStatus = 3;
    string description = 4;
    User host = 5;
    int32 introMode = 6;
    repeated BadgeStruct badges = 7;
    string language = 8;
}

message SystemMessage {
    string description = 2;
}

message RankItem {
    string colour = 1;
    uint64 id = 4;
}

message WebcastHourlyRankMessage {
    RankContainer data = 2;

    CommonMessageData common = 1;
    uint32 data2 = 3;

    message RankContainer {
        uint32 data1 = 1;
        RankingData rankingData = 2;
        uint32 data2 = 3;
        Ranking rankings = 4;
        RankingData2 rankingData2 = 5;
        uint32 data3 = 6;
        uint32 data4 = 7;

        message RankingData {
            uint32 data1 = 1;
            Ranking rankdata = 2;
            string data2 = 3;
        }

        message RankingData2 {
            uint32 data1 = 1;
            uint32 data2 = 2;
            Ranking rankdata = 3;
            string data3 = 4;
            uint32 data4 = 5;
            uint32 data5 = 6;
        }
    }

}

message EmoteDetails {
    string emoteId = 1;
    EmoteImage image = 2;
}

message EmoteImage {
    string imageUrl = 1;
}


message WebcastEnvelopeMessage {
    CommonMessageData common = 1;
    EnvelopeInfo envelopeInfo = 2;
    EnvelopeDisplay display = 3;

    message EnvelopeInfo {
        string envelopeId = 1;
        EnvelopeBusinessType businessType = 2;
        string envelopeIdc = 3;
        string sendUserName = 4;
        int32 diamondCount = 5;
        int32 peopleCount = 6;
        int32 unpackAt = 7;
        string sendUserId = 8;
        Image sendUserAvatar = 9;
        string createAt = 10;
        string roomId = 11;
        EnvelopeFollowShowStatus followShowStatus = 12;
        int32 skinId = 13;
    }
}



message TreasureBoxData {
    uint32 coins = 5;
    uint32 canOpen = 6;
    uint64 timestamp = 7;
}

// New Subscriber message
message WebcastSubNotifyMessage {
    CommonMessageData common = 1;
    User user = 2;
    ExhibitionType exhibitionType = 3;
    int64 subMonth = 4;
    SubscribeType subscribe_type = 5;
    OldSubscribeStatus oldSubscribeStatus = 6;
    optional MessageType subscribe_message_type = 7;
    SubscribingStatus subscribingStatus = 8;
    bool isSend = 9;
    bool isCustom = 10;
    GiftSource gift_source = 11;
    MessageDisplayStyle message_display_style = 12;
    PublicAreaMessageCommon public_area_message_common = 13;
    string package_id = 14;
    EventTracking event_tracking = 15;

    message EventTracking {
        int64 gift_sub_sender_id = 1;
        int64 gift_sub_receiver_id = 2;
        int64 anchor_id = 3;
        int64 gift_sub_order_create_time = 4;
    }

}

// ==================================
// Generic stuff


message FollowInfo {
    int32 followingCount = 1;
    int32 followerCount = 2;
    int32 followStatus = 3;
    int32 pushStatus = 4;
}

message ProfilePicture {
    repeated string urls = 1;
}


message UserBadgesAttributes {
    int32 badgeSceneType = 3;
    repeated UserImageBadge imageBadges = 20;
    repeated UserBadge badges = 21;
    PrivilegeLogExtra privilegeLogExtra = 12;
}


message UserBadge {
    string type = 2;
    string name = 3;
}

message UserImageBadge {
    int32 displayType = 1;
    UserImageBadgeImage image = 2;
}

message UserImageBadgeImage {
    string url = 1;
}


message WebcastBarrageMessage {
    CommonMessageData common = 1;
    BarrageEvent event = 2;
    optional BarrageType msg_type = 3;
    ImageModel icon = 4;
    int64 duration = 6;
    ImageModel back_ground = 7;
    ImageModel right_icon = 8;
    int32 display_config = 9;
    int64 gallery_gift_id = 10;
    bool use_marquee = 14;
    optional ShowType show_type = 15;
    optional RenderType render_type = 17;
    optional IconDisplayType left_icon_display_type = 18;
    ImageModel ribbon_animation = 19;
    string hybrid_url = 21;
    string schema = 22;
    string sub_type = 23;
    PrivilegeLogExtra privilege_log_extra = 103;

    enum BarrageType {
        BARRAGE_TYPE_UNKNOWN = 0;
        BARRAGE_TYPE_E_COM_ORDERING = 1;
        BARRAGE_TYPE_E_COM_BUYING = 2;
        BARRAGE_TYPE_NORMAL = 3;
        BARRAGE_TYPE_SUBSCRIBE = 4;
        BARRAGE_TYPE_EVENT_VIEW = 5;
        BARRAGE_TYPE_EVENT_REGISTERED = 6;
        BARRAGE_TYPE_SUBSCRIBE_GIFT = 7;
        BARRAGE_TYPE_USER_UPGRADE = 8;
        BARRAGE_TYPE_GRADE_USER_ENTRANCE_NOTIFICATION = 9;
        BARRAGE_TYPE_FANS_LEVEL_UPGRADE = 10;
        BARRAGE_TYPE_FANS_LEVEL_ENTRANCE = 11;
        BARRAGE_TYPE_GAME_PARTNERSHIP = 12;
        BARRAGE_TYPE_GIFT_GALLERY = 13;
        BARRAGE_TYPE_E_COM_BOUGHT = 14;
        BARRAGE_TYPE_COMMON_BARRAGE = 100;}
    enum ShowType {
        SHOW_TYPE_NORMAL = 0;
        SHOW_TYPE_FADE_IN_OUT = 1;}
    enum RenderType {
        RENDER_TYPE_NATIVE = 0;
        RENDER_TYPE_HYBRID = 1;
        RENDER_TYPE_ALPHA = 2;}
    enum IconDisplayType {
        ICON_DISPLAY_TYPE_IMAGE = 0;
        ICON_DISPLAY_TYPE_BADGE = 1;
    }


    message BarrageEvent {
        string event_name = 1;
        map<string, string> params = 2;
    }

    Text content = 5;
    Scene scene = 11;
    DisplayControl control = 12;
    RightLabel right_label = 13;
    BadgeStruct badge = 16;
    AnimationData animation_data = 20;
    Text common_barrage_content = 24;
    BarrageTypeUserGradeParam userGradeParam = 100;
    BarrageTypeFansLevelParam fansLevelParam = 101;
    BarrageTypeSubscribeGiftParam subscribeGiftParam = 102;
    BarrageTypeGiftGalleryParam gift_gallery_params = 104;

    message BarrageTypeUserGradeParam {
        int32 currentGrade = 1;
        int32 displayConfig = 2;
        string userId = 3;
        User user = 4;
    }
    message BarrageTypeFansLevelParam {
        int32 currentGrade = 1;
        int32 displayConfig = 2;
        User user = 4;
    }
    message BarrageTypeSubscribeGiftParam {
        int64 giftSubCount = 1;
        bool showGiftSubCount = 2;
    }

    message AnimationData {
        string gecko_channel_name = 1;
        string file_name = 2;
        int64 height = 3;
        int64 width = 4;
        int64 right_offset = 5;
    }

    message BarrageTypeGiftGalleryParam {
        int64 from_user_id = 1;
        int64 to_user_id = 2;
    }

    message DisplayControl {
        int32 priority = 1;
        int64 duration = 2;
        map<int32, ShowResult> target_group_show_rst = 3;
        HorizontalOnclickTriggerType horizontal_trigger_type = 4;

        message ShowResult {
            bool banned = 1;
        }
    }

    message RightLabel {
        string background_color = 1;
        Text content = 2;
        int64 height = 3;
    }
}


// Response from TikTokServer. Container for Messages
message ProtoMessageFetchResult {
    repeated BaseProtoMessage messages = 1;
    string cursor = 2;
    int64 fetchInterval = 3;
    int64 now = 4;
    string internalExt = 5;
    int32 fetchType = 6;
    map<string, string> wsParams = 7;
    int32 heartBeatDuration = 8;
    bool needsAck = 9;
    string wsUrl = 10;
    bool isFirst = 11;
    string historyCommentCursor = 12;
    bool historyNoMore = 13;

    // Server-Message. Binary will deserialize into specific message

}


message BaseProtoMessage {
    string type = 1;
    bytes payload = 2;
    int64 msgId = 3;
    int32 msgType = 4;
    int64 offset = 5;
    bool isHistory = 6;
}

/*message RoomMessage {
  CommonMessageData common = 1;
  string content = 2;
  bool supportLandscape = 3;
  int64 source = 4;
  Image icon = 5;
  Scene scene = 6;
  bool isWelcome = 7;
  PublicAreaMessageCommon public_area_common = 8;
  int64 show_duration_ms = 9;
  string sub_scene = 10;
}*/

message WebcastRoomMessage {
    CommonMessageData common = 1;
    string content = 2;
    bool supportLandscape = 3;
    int64 source = 4;
    Image icon = 5;
    Scene scene = 6;
    bool isWelcome = 7;
    PublicAreaMessageCommon public_area_common = 8;
    int64 show_duration_ms = 9;
    string sub_scene = 10;
}


// Closed Captioning for Video
message WebcastCaptionMessage {
    CommonMessageData common = 1;
    int64 timestamp_ms = 2;
    int64 duration_ms = 3;
    repeated CaptionContent content = 4;
    int64 sentence_id = 5;
    int64 sequence_id = 6;
    bool definite = 7;

    message CaptionContent {
        string lang = 1;
        string content = 2;
    }
}


// System-Control Message from Room (e.g. Host ended Stream)
message WebcastControlMessage {
    CommonMessageData common = 1;
    ControlAction action = 2;
    string tips = 3;
    Extra extra = 4;
    PerceptionDialogInfo perceptionDialog = 5;
    Text perceptionAudienceText = 6;
    PunishEventInfo punishInfo = 7;
    Text floatText = 8;
    int32 floatStyle = 9;

    // @Extra
    // proto.webcast.im.ControlMessage
    message Extra {
        string banInfoUrl = 1;
        int64 reasonNo = 2;
        Text title = 3;
        Text violationReason = 4;
        Text content = 5;
        Text gotItButton = 6;
        Text banDetailButton = 7;
        string source = 8;
    }

    message PerceptionDialogInfo {
        PerceptionDialogIconType icon_type = 1;
        Text title = 2;
        Text sub_title = 3;
        Text advice_action_text = 4;
        Text default_action_text = 5;
        string violation_detail_url = 6;
        Scene scene = 7;
        int64 target_user_id = 8;
        int64 target_room_id = 9;
        int64 count_down_time = 10;
        bool show_feedback = 11;
        repeated PerceptionFeedbackOption feedback_options = 12;
        int64 policy_tip = 13;
        int32 appeal_popup = 14;

        message PerceptionFeedbackOption {
            int64 id = 1;
            string content_key = 2;
        }
    }
}



message WebcastGoalUpdateMessage {
    CommonMessageData common = 1;
    LiveStreamGoalIndicator indicator = 2;
    LiveStreamGoal goal = 3;
    int64 contributorId = 4;
    Image contributorAvatar = 5;
    string contributorDisplayId = 6;
    LiveStreamSubGoal contributeSubgoal = 7;
    int64 contributeCount = 9;
    int64 contributeScore = 10;
    int64 giftRepeatCount = 11;
    string contributorIdStr = 12;
    bool pin = 13;
    bool unpin = 14;
    GoalPinInfo pinInfo = 15;
    GoalMessageSource update_source = 16;
    string goal_extra = 17;

    message LiveStreamSubGoal {
        int32 type = 1;
        int64 id = 2;
        int64 progress = 3;
        int64 target = 4;
        LiveStreamSubGoalGift gift = 5;
        string id_str = 6;
        SubGoalPinInfo pin_info = 7;
        int32 source = 8;
        string recommended_text = 9;
        string recommended_common = 10;

        message LiveStreamSubGoalGift {
            string name = 1;
            Image icon = 2;
            int64 diamond_count = 3;
            int32 type = 4;
        }

        message SubGoalPinInfo {
            int64 pin_start_time = 1;
            int64 pin_end_time = 2;
            int64 pin_ready_time = 3;
        }
    }

    message GoalPinInfo {
        bool pin = 1;
        bool unpin = 2;
        int64 pin_end_time = 3;
        int64 sub_goal_id = 4;
        string sub_goal_id_str = 5;
    }
}

// Message related to Chat-moderation?
message WebcastImDeleteMessage {
    CommonMessageData common = 1;
    repeated int64 deleteMsgIdsList = 2;
    repeated int64 deleteUserIdsList = 3;
}

message WebcastInRoomBannerMessage {
    CommonMessageData common = 1;
    map<string, string> data = 2;
    int32 position = 3;
    int32 action_type = 4;
}


message WebcastRankUpdateMessage {
    CommonMessageData common = 1;
    repeated RankUpdate updatesList = 2;
    int64 groupType = 3; // @warning Enum not found, should be GroupType
    int64 priority = 5;
    repeated RankTabInfo tabsList = 6;
    bool isAnimationLoopPlay = 7;
    bool animationLoopForOff = 8;
    repeated UnionAnimationInfo union_animation = 9;
    repeated RankListTabInfo tab_info = 10;

    message UnionAnimationInfo {
        UnionAnimationInfoType union_type = 1;
        ProfitRankType rank_type_array = 2;
        int64 supported_version = 3;
    }

    message RankListTabInfo {
        repeated RankTabInfo tabs = 1;
        int64 supported_version = 2;
    }

    message RankTabInfo {
        ProfitRankType rank_type = 1;
        string title = 2;
        Text titleText = 3;
        int64 listLynxType = 4;
    }

    // @RankUpdate
    // proto.webcast.im.RankUpdateMessage
    message RankUpdate {
        int64 rankType = 1; // @warning Enum not found, should be RankType
        int64 ownerRank = 2;
        Text defaultContent = 3;
        bool showEntranceAnimation = 5;
        int64 countdown = 6;
        int64 relatedTabRankType = 8; // @warning Enum not found, should be RelatedTabRankType
        int64 requestFirstShowType = 9; // @warning Enum not found, should be RequestFirstShowType
        int64 supportedVersion = 10;
        bool owneronrank = 11;
    }
}

// --- HandMade --
message WebcastPollMessage {
    CommonMessageData common = 1;
    MessageType messageType = 2;
    int64 pollId = 3;
    PollStartContent startContent = 4;
    PollEndContent endContent = 5;
    PollUpdateVotesContent updateContent = 6;
    PollKind pollKind = 7;
    PollBasicInfo pollBasicInfo = 8;
    TemplateContent templateContent = 9;

    message TemplateContent {
        int64 template_id = 1;
        string template_id_str = 2;
        PollTemplateStatus status = 3;
        PollKind poll_kind = 4;
        PollAppealStatus appeal_status = 5;
        string violation_id_str = 6;
    }

    message PollBasicInfo {
        string poll_sponsor = 1;
        int64 gift_id = 2;
        string title = 3;
        bool is_suggested_question = 4;
        int64 user_cnt = 5;
        Gift gift = 6;
        string poll_id_str = 7;
        string suggested_question_key = 8;
        int64 poll_duration = 9;
        int64 time_remain = 10;
        int64 poll_index = 11;
        int64 template_id = 12;
    }
}


message WebcastRankTextMessage {
    CommonMessageData common = 1;
    RankTestMessageScene scene = 2;
    int64 ownerIdxBeforeUpdate = 3;
    int64 ownerIdxAfterUpdate = 4;
    Text selfGetBadgeMsg = 5;
    Text otherGetBadgeMsg = 6;
    int64 curUserId = 7;
}



//<Battles>

message WebcastLinkMicBattlePunishFinish {
    CommonMessageData common = 1;
    int64 channel_id = 2;
    int64 op_uid = 3;
    Reason reason = 4;
    int64 battle_id = 5;
    BattleSetting battle_settings = 6;
}

message WebcastLinkmicBattleTaskMessage {
    CommonMessageData common = 1;
    BattleTaskMessageType battle_task_message_type = 2;
    BattleTaskStart task_start = 3;
    BattleTaskUpdate task_update = 4;
    BattleTaskSettle task_settle = 5;
    BattleRewardSettle reward_settle = 6;
    int64 battle_id = 20;

    message BattlePrompt {
        string prompt_key = 1;
        repeated BattlePromptElem prompt_elements = 2;

        message BattlePromptElem {
            string prompt_field_key = 1;
            string prompt_field_value = 2;
        }
    }

    message BattleTaskStart {
        BattleBonusConfig battle_bonus_config = 1;

        message BattleBonusConfig {
            int64 preview_start_time = 1;
            repeated PreviewPeriod preview_period_config = 2;
            TaskPeriodConfig task_period_config = 3;
            RewardPeriodConfig reward_period_config = 4;
            map<int64, BattleTaskGiftAmountGuide> task_gift_guide = 5;
            int64 preview_start_timestamp = 6;
            string preview_click_action_schema_url = 7;

            message PreviewPeriod {
                int64 duration = 1;
                BattlePrompt promot = 2;
                Image icon = 25;
            }

            message TaskPeriodConfig {
                int64 task_start_time = 1;
                int64 duration = 2;
                int64 target_start_timestamp = 3;
                int32 click_action = 11;
                BattlePrompt click_toast_prompt = 12;
                int32 prompt_type = 21;
                BattlePrompt task_static_prompt = 22;
                int64 progress_target = 23;
                int32 target_type = 24;
                Image icon = 25;
                string click_action_schema_url = 26;
            }

            message RewardPeriodConfig {
                int64 reward_start_time = 1;
                int64 duration = 2;
                int32 reward_multiple = 3;
                int64 reward_start_timestamp = 4;
                BattlePrompt reward_prapare_prompt = 11;
                BattlePrompt rewarding_prompt = 12;
                BattlePrompt click_prompt = 13;
            }

            message BattleTaskGiftAmountGuide {
                BattlePrompt guide_prompt = 1;
                int32 prompt_type = 2;
                int32 disappear_duration = 3;
                Image icon_image = 11;
                Image gift_image = 12;
                int64 recommend_gift_id = 21;
                int32 recommend_gift_count = 22;
                Text guide_content = 23;
            }
        }
    }

    message BattleTaskUpdate {
        int64 task_progress = 1;
        int64 from_user_uid = 2;
        string prompt_key = 3;
        string log_id = 21;
    }

    message BattleTaskSettle {
        Result task_result = 1;
        int64 reward_start_time = 2;
        int64 reward_start_timestamp = 3;

        enum Result {
            RESULT_SUCCEED = 0;
            RESULT_FAILED = 1;
            RESULT_BOTH_SUCCEED = 2;
        }
    }

    message BattleRewardSettle {
        BattlePrompt reward_settle_prompt = 1;
        RewardStatus status = 2;
    }
}

message WebcastLinkMicFanTicketMethod {
    CommonMessageData common = 1;
    FanTicketRoomNoticeContent FanTicketRoomNotice = 2;
}

message WebcastLinkMicMethod {
    CommonMessageData common = 1;
    MessageType messageType = 2;
    string accessKey = 3;
    int64 anchorLinkmicId = 4;
    int64 userId = 5;
    int64 fanTicket = 6;
    int64 totalLinkMicFanTicket = 7;
    int64 channelId = 8;
    int64 layout = 9;
    int64 vendor = 10;
    int64 dimension = 11;
    string theme = 12;
    int64 inviteUid = 13;
    int32 reply = 14;
    int32 duration = 16;
    int32 matchType = 18;
    bool win = 19;
    string prompts = 20;
    int64 toUserId = 21;
    string tips = 25;
    int64 startTimeMs = 26;
    int32 confluenceType = 27;
    int64 fromRoomId = 28;
    int32 inviteType = 29;
    int64 subType = 30;
    string rtcExtInfo = 32;
    string appId = 34;
    string appSign = 35;
    string anchorLinkMicIdStr = 37;
    int64 rivalAnchorId = 38;
    int32 rivalLinkmicId = 39;
    string rivalLinkmicIdStr = 40;
    bool shouldShowPopup = 41;
    bool rtcJoinChannel = 51;
    int32 fanTicketType = 52;
}



message WebcastUnauthorizedMemberMessage {
    CommonMessageData common = 1;
    int32 action = 2;
    Text nickNamePrefix = 3;
    string nickName = 4;
    Text enterText = 5;
    PublicAreaMessageCommon public_area_common = 6;
}

message WebcastMsgDetectMessage {
    CommonMessageData common = 1;
    int32 detectType = 2;
    TriggerCondition triggerCondition = 3;
    TimeInfo timeInfo = 4;
    int32 triggerBy = 5;
    string fromRegion = 6;

    message TimeInfo {
        int64 clientStartMs = 1;
        int64 apiRecvTimeMs = 2;
        int64 apiSendToGoimMs = 3;
    }

    message TriggerCondition {
        bool uplinkDetectHttp = 1;
        bool uplinkDetectWebSocket = 2;
        bool detectP2PMsg = 3;
        bool detectRoomMsg = 4;
        bool httpOptimize = 5;
    }
}

message WebcastOecLiveShoppingMessage {
    CommonMessageData common = 1;
    uint32 data1 = 2;
    LiveShoppingData shopData = 4;
    TimeStampContainer shopTimings = 5; // Uses index 1, 2 & 3
    LiveShoppingDetails details = 9;

    message LiveShoppingData {
        string title = 1;
        string priceString = 2; // $55.99
        string imageUrl = 3;
        string shopUrl = 4;
        uint64 data1 = 6;
        string shopName = 7; // "Shopify"
        uint64 data2 = 8;
        string shopUrl2 = 9;
        uint64 data3 = 10;
        uint64 data4 = 11;
    }

    message LiveShoppingDetails {
        string id1 = 1;
        string data1 = 3;
        uint32 data2 = 4;
        uint64 timestamp = 5;
        ValueLabel data = 6;
    }
}

// Host Pins comment to stream
message WebcastRoomPinMessage {
    CommonMessageData common = 1;
    oneof webcastMsg {
        WebcastChatMessage chat_message = 2;
        WebcastSocialMessage social_message = 3;
        WebcastGiftMessage gift_message = 4;
        WebcastMemberMessage member_message = 5;
        WebcastLikeMessage like_message = 6;
    }
    string method = 30;
    int64 pin_time = 31;
    User operator = 32;
    int32 action = 33;
    int64 display_duration = 34;
    int64 pin_id = 35;
    string ec_streamer_key = 36;
}

/*message WebcastSystemMessage {
  CommonMessageData common = 1;
  string message = 2;
}*/

message WebcastLinkMessage {
    CommonMessageData common = 1;
    LinkMessageType MessageType = 2;
    int64 LinkerId = 3;
    Scene Scene = 4;
    LinkerInviteContent InviteContent = 5;
    LinkerReplyContent ReplyContent = 6;
    LinkerCreateContent CreateContent = 7;
    LinkerCloseContent CloseContent = 8;
    LinkerEnterContent EnterContent = 9;
    LinkerLeaveContent LeaveContent = 10;
    LinkerCancelContent CancelContent = 11;
    LinkerKickOutContent KickOutContent = 12;
    LinkerLinkedListChangeContent LinkedListChangeContent = 13;
    LinkerUpdateUserContent UpdateUserContent = 14;
    LinkerWaitingListChangeContent WaitingListChangeContent = 15;
    LinkerMuteContent MuteContent = 16;
    LinkerRandomMatchContent RandomMatchContent = 17;
    LinkerUpdateUserSettingContent UpdateUserSettingContent = 18;
    LinkerMicIdxUpdateContent MicIdxUpdateContent = 19;
    LinkerListChangeContent ListChangeContent = 20;
    CohostListChangeContent CohostListChangeContent = 21;
    LinkerMediaChangeContent MediaChangeContent = 22;
    LinkerAcceptNoticeContent AcceptNoticeContent = 23;
    LinkerSysKickOutContent SysKickOutContent = 101;
    LinkmicUserToastContent UserToastContent = 102;
    string extra = 200;
    int64 expireTimestamp = 201;
    string transferExtra = 202;
}


// @WebcastLinkLayerMessage
message WebcastLinkLayerMessage {
    CommonMessageData common = 1;
    MessageType messageType = 2;
    int64 channelId = 3;
    Scene scene = 4;
    string source = 5;
    string centerized_idc = 6;
    int64 rtc_room_id = 7;
    CreateChannelContent createChannelContent = 100;
    ListChangeContent listChangeContent = 102;
    InviteContent inviteContent = 103;
    ApplyContent applyContent = 104;
    PermitApplyContent permitApplyContent = 105;
    ReplyInviteContent replyInviteContent = 106;
    KickOutContent kickOutContent = 107;
    CancelApplyContent cancelApplyContent = 108;
    CancelInviteContent cancelInviteContent = 109;
    LeaveContent leaveContent = 110;
    FinishChannelContent finishContent = 111;
    JoinDirectContent joinDirectContent = 112;
    JoinGroupContent joinGroupContent = 113;
    PermitJoinGroupContent permitGroupContent = 114;
    CancelJoinGroupContent cancelGroupContent = 115;
    LeaveJoinGroupContent leaveGroupContent = 116;
    P2PGroupChangeContent p2pGroupChangeContent = 117;
    GroupChangeContent group_change_content = 118;
    BusinessContent businessContent = 200;
}

// @RoomVerifyMessage
message RoomVerifyMessage {
    CommonMessageData common = 1;
    int32 action = 2;
    string content = 3;
    int64 noticeType = 4;
    bool closeRoom = 5;
}


message WebcastBarrageMessage_Old {
    CommonMessageData event = 1;
    int32 msgType = 3;
    Text content = 5;

    message Text {
        string key = 1;
        string defaultPattern = 2;
        repeated TextPiece pieces = 4;
    }

    message TextPiece {
        int32 type = 1;
        string stringValue = 11;
        TextPieceUser userValue = 21;
    }

    message TextPieceUser {
        User user = 1;
        bool withColon = 2;
    }

}


message WebcastImEnterRoomMessage {
    int64 room_id = 1; // sent
    string room_tag = 2; // Not sent, even when there is a hashtag on the room
    string live_region = 3; // not sent
    int64 live_id = 4; // "12" <- It's a STATIC value for all streams, I checked the decompiled proto
    string identity = 5; // "audience"
    string cursor = 6; // ""
    int64 account_type = 7; // 0
    int64 enter_unique_id = 8; // NOT sent
    string filter_welcome_msg = 9; // "0"
    bool is_anchor_continue_keep_msg = 10; // 0
}
